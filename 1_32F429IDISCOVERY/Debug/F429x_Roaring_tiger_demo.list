
F429x_Roaring_tiger_demo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002c9c  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00070810  08002e48  08002e48  00012e48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08073658  08073658  0009000c  2**0
                  CONTENTS
  4 .ARM          00000008  08073658  08073658  00083658  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08073660  08073660  0009000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08073660  08073660  00083660  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08073664  08073664  00083664  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08073668  00090000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0009000c  2**0
                  CONTENTS
 10 .bss          000000c8  2000000c  2000000c  0009000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200000d4  200000d4  0009000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0009000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000731b  00000000  00000000  0009003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001896  00000000  00000000  00097357  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000006e0  00000000  00000000  00098bf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000005d0  00000000  00000000  000992d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023b36  00000000  00000000  000998a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00009171  00000000  00000000  000bd3d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d4607  00000000  00000000  000c6547  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0019ab4e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000190c  00000000  00000000  0019aba0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	2000000c 	.word	0x2000000c
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08002e30 	.word	0x08002e30

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000010 	.word	0x20000010
 80001e8:	08002e30 	.word	0x08002e30

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000200:	f000 b974 	b.w	80004ec <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	4604      	mov	r4, r0
 8000224:	468e      	mov	lr, r1
 8000226:	2b00      	cmp	r3, #0
 8000228:	d14d      	bne.n	80002c6 <__udivmoddi4+0xaa>
 800022a:	428a      	cmp	r2, r1
 800022c:	4694      	mov	ip, r2
 800022e:	d969      	bls.n	8000304 <__udivmoddi4+0xe8>
 8000230:	fab2 f282 	clz	r2, r2
 8000234:	b152      	cbz	r2, 800024c <__udivmoddi4+0x30>
 8000236:	fa01 f302 	lsl.w	r3, r1, r2
 800023a:	f1c2 0120 	rsb	r1, r2, #32
 800023e:	fa20 f101 	lsr.w	r1, r0, r1
 8000242:	fa0c fc02 	lsl.w	ip, ip, r2
 8000246:	ea41 0e03 	orr.w	lr, r1, r3
 800024a:	4094      	lsls	r4, r2
 800024c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000250:	0c21      	lsrs	r1, r4, #16
 8000252:	fbbe f6f8 	udiv	r6, lr, r8
 8000256:	fa1f f78c 	uxth.w	r7, ip
 800025a:	fb08 e316 	mls	r3, r8, r6, lr
 800025e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000262:	fb06 f107 	mul.w	r1, r6, r7
 8000266:	4299      	cmp	r1, r3
 8000268:	d90a      	bls.n	8000280 <__udivmoddi4+0x64>
 800026a:	eb1c 0303 	adds.w	r3, ip, r3
 800026e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000272:	f080 811f 	bcs.w	80004b4 <__udivmoddi4+0x298>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 811c 	bls.w	80004b4 <__udivmoddi4+0x298>
 800027c:	3e02      	subs	r6, #2
 800027e:	4463      	add	r3, ip
 8000280:	1a5b      	subs	r3, r3, r1
 8000282:	b2a4      	uxth	r4, r4
 8000284:	fbb3 f0f8 	udiv	r0, r3, r8
 8000288:	fb08 3310 	mls	r3, r8, r0, r3
 800028c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000290:	fb00 f707 	mul.w	r7, r0, r7
 8000294:	42a7      	cmp	r7, r4
 8000296:	d90a      	bls.n	80002ae <__udivmoddi4+0x92>
 8000298:	eb1c 0404 	adds.w	r4, ip, r4
 800029c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002a0:	f080 810a 	bcs.w	80004b8 <__udivmoddi4+0x29c>
 80002a4:	42a7      	cmp	r7, r4
 80002a6:	f240 8107 	bls.w	80004b8 <__udivmoddi4+0x29c>
 80002aa:	4464      	add	r4, ip
 80002ac:	3802      	subs	r0, #2
 80002ae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002b2:	1be4      	subs	r4, r4, r7
 80002b4:	2600      	movs	r6, #0
 80002b6:	b11d      	cbz	r5, 80002c0 <__udivmoddi4+0xa4>
 80002b8:	40d4      	lsrs	r4, r2
 80002ba:	2300      	movs	r3, #0
 80002bc:	e9c5 4300 	strd	r4, r3, [r5]
 80002c0:	4631      	mov	r1, r6
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d909      	bls.n	80002de <__udivmoddi4+0xc2>
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	f000 80ef 	beq.w	80004ae <__udivmoddi4+0x292>
 80002d0:	2600      	movs	r6, #0
 80002d2:	e9c5 0100 	strd	r0, r1, [r5]
 80002d6:	4630      	mov	r0, r6
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	fab3 f683 	clz	r6, r3
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d14a      	bne.n	800037c <__udivmoddi4+0x160>
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d302      	bcc.n	80002f0 <__udivmoddi4+0xd4>
 80002ea:	4282      	cmp	r2, r0
 80002ec:	f200 80f9 	bhi.w	80004e2 <__udivmoddi4+0x2c6>
 80002f0:	1a84      	subs	r4, r0, r2
 80002f2:	eb61 0303 	sbc.w	r3, r1, r3
 80002f6:	2001      	movs	r0, #1
 80002f8:	469e      	mov	lr, r3
 80002fa:	2d00      	cmp	r5, #0
 80002fc:	d0e0      	beq.n	80002c0 <__udivmoddi4+0xa4>
 80002fe:	e9c5 4e00 	strd	r4, lr, [r5]
 8000302:	e7dd      	b.n	80002c0 <__udivmoddi4+0xa4>
 8000304:	b902      	cbnz	r2, 8000308 <__udivmoddi4+0xec>
 8000306:	deff      	udf	#255	; 0xff
 8000308:	fab2 f282 	clz	r2, r2
 800030c:	2a00      	cmp	r2, #0
 800030e:	f040 8092 	bne.w	8000436 <__udivmoddi4+0x21a>
 8000312:	eba1 010c 	sub.w	r1, r1, ip
 8000316:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800031a:	fa1f fe8c 	uxth.w	lr, ip
 800031e:	2601      	movs	r6, #1
 8000320:	0c20      	lsrs	r0, r4, #16
 8000322:	fbb1 f3f7 	udiv	r3, r1, r7
 8000326:	fb07 1113 	mls	r1, r7, r3, r1
 800032a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800032e:	fb0e f003 	mul.w	r0, lr, r3
 8000332:	4288      	cmp	r0, r1
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x12c>
 8000336:	eb1c 0101 	adds.w	r1, ip, r1
 800033a:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x12a>
 8000340:	4288      	cmp	r0, r1
 8000342:	f200 80cb 	bhi.w	80004dc <__udivmoddi4+0x2c0>
 8000346:	4643      	mov	r3, r8
 8000348:	1a09      	subs	r1, r1, r0
 800034a:	b2a4      	uxth	r4, r4
 800034c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000350:	fb07 1110 	mls	r1, r7, r0, r1
 8000354:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000358:	fb0e fe00 	mul.w	lr, lr, r0
 800035c:	45a6      	cmp	lr, r4
 800035e:	d908      	bls.n	8000372 <__udivmoddi4+0x156>
 8000360:	eb1c 0404 	adds.w	r4, ip, r4
 8000364:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000368:	d202      	bcs.n	8000370 <__udivmoddi4+0x154>
 800036a:	45a6      	cmp	lr, r4
 800036c:	f200 80bb 	bhi.w	80004e6 <__udivmoddi4+0x2ca>
 8000370:	4608      	mov	r0, r1
 8000372:	eba4 040e 	sub.w	r4, r4, lr
 8000376:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800037a:	e79c      	b.n	80002b6 <__udivmoddi4+0x9a>
 800037c:	f1c6 0720 	rsb	r7, r6, #32
 8000380:	40b3      	lsls	r3, r6
 8000382:	fa22 fc07 	lsr.w	ip, r2, r7
 8000386:	ea4c 0c03 	orr.w	ip, ip, r3
 800038a:	fa20 f407 	lsr.w	r4, r0, r7
 800038e:	fa01 f306 	lsl.w	r3, r1, r6
 8000392:	431c      	orrs	r4, r3
 8000394:	40f9      	lsrs	r1, r7
 8000396:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800039a:	fa00 f306 	lsl.w	r3, r0, r6
 800039e:	fbb1 f8f9 	udiv	r8, r1, r9
 80003a2:	0c20      	lsrs	r0, r4, #16
 80003a4:	fa1f fe8c 	uxth.w	lr, ip
 80003a8:	fb09 1118 	mls	r1, r9, r8, r1
 80003ac:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b0:	fb08 f00e 	mul.w	r0, r8, lr
 80003b4:	4288      	cmp	r0, r1
 80003b6:	fa02 f206 	lsl.w	r2, r2, r6
 80003ba:	d90b      	bls.n	80003d4 <__udivmoddi4+0x1b8>
 80003bc:	eb1c 0101 	adds.w	r1, ip, r1
 80003c0:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003c4:	f080 8088 	bcs.w	80004d8 <__udivmoddi4+0x2bc>
 80003c8:	4288      	cmp	r0, r1
 80003ca:	f240 8085 	bls.w	80004d8 <__udivmoddi4+0x2bc>
 80003ce:	f1a8 0802 	sub.w	r8, r8, #2
 80003d2:	4461      	add	r1, ip
 80003d4:	1a09      	subs	r1, r1, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb1 f0f9 	udiv	r0, r1, r9
 80003dc:	fb09 1110 	mls	r1, r9, r0, r1
 80003e0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003e4:	fb00 fe0e 	mul.w	lr, r0, lr
 80003e8:	458e      	cmp	lr, r1
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x1e2>
 80003ec:	eb1c 0101 	adds.w	r1, ip, r1
 80003f0:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80003f4:	d26c      	bcs.n	80004d0 <__udivmoddi4+0x2b4>
 80003f6:	458e      	cmp	lr, r1
 80003f8:	d96a      	bls.n	80004d0 <__udivmoddi4+0x2b4>
 80003fa:	3802      	subs	r0, #2
 80003fc:	4461      	add	r1, ip
 80003fe:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000402:	fba0 9402 	umull	r9, r4, r0, r2
 8000406:	eba1 010e 	sub.w	r1, r1, lr
 800040a:	42a1      	cmp	r1, r4
 800040c:	46c8      	mov	r8, r9
 800040e:	46a6      	mov	lr, r4
 8000410:	d356      	bcc.n	80004c0 <__udivmoddi4+0x2a4>
 8000412:	d053      	beq.n	80004bc <__udivmoddi4+0x2a0>
 8000414:	b15d      	cbz	r5, 800042e <__udivmoddi4+0x212>
 8000416:	ebb3 0208 	subs.w	r2, r3, r8
 800041a:	eb61 010e 	sbc.w	r1, r1, lr
 800041e:	fa01 f707 	lsl.w	r7, r1, r7
 8000422:	fa22 f306 	lsr.w	r3, r2, r6
 8000426:	40f1      	lsrs	r1, r6
 8000428:	431f      	orrs	r7, r3
 800042a:	e9c5 7100 	strd	r7, r1, [r5]
 800042e:	2600      	movs	r6, #0
 8000430:	4631      	mov	r1, r6
 8000432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000436:	f1c2 0320 	rsb	r3, r2, #32
 800043a:	40d8      	lsrs	r0, r3
 800043c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000440:	fa21 f303 	lsr.w	r3, r1, r3
 8000444:	4091      	lsls	r1, r2
 8000446:	4301      	orrs	r1, r0
 8000448:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800044c:	fa1f fe8c 	uxth.w	lr, ip
 8000450:	fbb3 f0f7 	udiv	r0, r3, r7
 8000454:	fb07 3610 	mls	r6, r7, r0, r3
 8000458:	0c0b      	lsrs	r3, r1, #16
 800045a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800045e:	fb00 f60e 	mul.w	r6, r0, lr
 8000462:	429e      	cmp	r6, r3
 8000464:	fa04 f402 	lsl.w	r4, r4, r2
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0x260>
 800046a:	eb1c 0303 	adds.w	r3, ip, r3
 800046e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000472:	d22f      	bcs.n	80004d4 <__udivmoddi4+0x2b8>
 8000474:	429e      	cmp	r6, r3
 8000476:	d92d      	bls.n	80004d4 <__udivmoddi4+0x2b8>
 8000478:	3802      	subs	r0, #2
 800047a:	4463      	add	r3, ip
 800047c:	1b9b      	subs	r3, r3, r6
 800047e:	b289      	uxth	r1, r1
 8000480:	fbb3 f6f7 	udiv	r6, r3, r7
 8000484:	fb07 3316 	mls	r3, r7, r6, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb06 f30e 	mul.w	r3, r6, lr
 8000490:	428b      	cmp	r3, r1
 8000492:	d908      	bls.n	80004a6 <__udivmoddi4+0x28a>
 8000494:	eb1c 0101 	adds.w	r1, ip, r1
 8000498:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 800049c:	d216      	bcs.n	80004cc <__udivmoddi4+0x2b0>
 800049e:	428b      	cmp	r3, r1
 80004a0:	d914      	bls.n	80004cc <__udivmoddi4+0x2b0>
 80004a2:	3e02      	subs	r6, #2
 80004a4:	4461      	add	r1, ip
 80004a6:	1ac9      	subs	r1, r1, r3
 80004a8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004ac:	e738      	b.n	8000320 <__udivmoddi4+0x104>
 80004ae:	462e      	mov	r6, r5
 80004b0:	4628      	mov	r0, r5
 80004b2:	e705      	b.n	80002c0 <__udivmoddi4+0xa4>
 80004b4:	4606      	mov	r6, r0
 80004b6:	e6e3      	b.n	8000280 <__udivmoddi4+0x64>
 80004b8:	4618      	mov	r0, r3
 80004ba:	e6f8      	b.n	80002ae <__udivmoddi4+0x92>
 80004bc:	454b      	cmp	r3, r9
 80004be:	d2a9      	bcs.n	8000414 <__udivmoddi4+0x1f8>
 80004c0:	ebb9 0802 	subs.w	r8, r9, r2
 80004c4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004c8:	3801      	subs	r0, #1
 80004ca:	e7a3      	b.n	8000414 <__udivmoddi4+0x1f8>
 80004cc:	4646      	mov	r6, r8
 80004ce:	e7ea      	b.n	80004a6 <__udivmoddi4+0x28a>
 80004d0:	4620      	mov	r0, r4
 80004d2:	e794      	b.n	80003fe <__udivmoddi4+0x1e2>
 80004d4:	4640      	mov	r0, r8
 80004d6:	e7d1      	b.n	800047c <__udivmoddi4+0x260>
 80004d8:	46d0      	mov	r8, sl
 80004da:	e77b      	b.n	80003d4 <__udivmoddi4+0x1b8>
 80004dc:	3b02      	subs	r3, #2
 80004de:	4461      	add	r1, ip
 80004e0:	e732      	b.n	8000348 <__udivmoddi4+0x12c>
 80004e2:	4630      	mov	r0, r6
 80004e4:	e709      	b.n	80002fa <__udivmoddi4+0xde>
 80004e6:	4464      	add	r4, ip
 80004e8:	3802      	subs	r0, #2
 80004ea:	e742      	b.n	8000372 <__udivmoddi4+0x156>

080004ec <__aeabi_idiv0>:
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop

080004f0 <BSP_LCD_Init>:
void LCD_Write_Cmd(uint8_t cmd);
void LCD_SPI_Enable(void);
void LCD_Write_Data(uint8_t *buffer,uint32_t len);

void BSP_LCD_Init(void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	af00      	add	r7, sp, #0
	LCD_Pin_Init();
 80004f4:	f000 f86a 	bl	80005cc <LCD_Pin_Init>
	LCD_SPI_Init();
 80004f8:	f000 f972 	bl	80007e0 <LCD_SPI_Init>
	LCD_SPI_Enable();
 80004fc:	f000 f95c 	bl	80007b8 <LCD_SPI_Enable>
	LCD_Reset();
 8000500:	f000 f9ea 	bl	80008d8 <LCD_Reset>
	LCD_Config();
 8000504:	f000 fa16 	bl	8000934 <LCD_Config>
}
 8000508:	bf00      	nop
 800050a:	bd80      	pop	{r7, pc}

0800050c <BSP_LCD_Set_Orientation>:




void BSP_LCD_Set_Orientation(int orientation)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b084      	sub	sp, #16
 8000510:	af00      	add	r7, sp, #0
 8000512:	6078      	str	r0, [r7, #4]
	uint8_t params[4];

	if(orientation == LANDSCAPE){
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	2b01      	cmp	r3, #1
 8000518:	d124      	bne.n	8000564 <BSP_LCD_Set_Orientation+0x58>

		LCD_Write_Cmd(ILI9341_RASET); //page address set
 800051a:	202b      	movs	r0, #43	; 0x2b
 800051c:	f000 fb6a 	bl	8000bf4 <LCD_Write_Cmd>
		params[0]= 0x00;
 8000520:	2300      	movs	r3, #0
 8000522:	733b      	strb	r3, [r7, #12]
		params[1]= 0x00;
 8000524:	2300      	movs	r3, #0
 8000526:	737b      	strb	r3, [r7, #13]
		params[2]= 0x00;
 8000528:	2300      	movs	r3, #0
 800052a:	73bb      	strb	r3, [r7, #14]
		params[3]= 0xf0; //240 rows = 0xf0
 800052c:	23f0      	movs	r3, #240	; 0xf0
 800052e:	73fb      	strb	r3, [r7, #15]
		LCD_Write_Data(params, 4);
 8000530:	f107 030c 	add.w	r3, r7, #12
 8000534:	2104      	movs	r1, #4
 8000536:	4618      	mov	r0, r3
 8000538:	f000 fba0 	bl	8000c7c <LCD_Write_Data>

		LCD_Write_Cmd(ILI9341_CASET);
 800053c:	202a      	movs	r0, #42	; 0x2a
 800053e:	f000 fb59 	bl	8000bf4 <LCD_Write_Cmd>
		params[0]= 0x00;
 8000542:	2300      	movs	r3, #0
 8000544:	733b      	strb	r3, [r7, #12]
		params[1]= 0x00;
 8000546:	2300      	movs	r3, #0
 8000548:	737b      	strb	r3, [r7, #13]
		params[2]= 0x01;
 800054a:	2301      	movs	r3, #1
 800054c:	73bb      	strb	r3, [r7, #14]
		params[3]= 0x40; //320 columns = 0x140
 800054e:	2340      	movs	r3, #64	; 0x40
 8000550:	73fb      	strb	r3, [r7, #15]
		LCD_Write_Data(params, 4);
 8000552:	f107 030c 	add.w	r3, r7, #12
 8000556:	2104      	movs	r1, #4
 8000558:	4618      	mov	r0, r3
 800055a:	f000 fb8f 	bl	8000c7c <LCD_Write_Data>

		params[0] = MADCTL_MV | MADCTL_MY | MADCTL_BGR; /*Memory Access Control <Landscape setting>*/
 800055e:	23a8      	movs	r3, #168	; 0xa8
 8000560:	733b      	strb	r3, [r7, #12]
 8000562:	e026      	b.n	80005b2 <BSP_LCD_Set_Orientation+0xa6>
	}else if(orientation == PORTRAIT){
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	2b00      	cmp	r3, #0
 8000568:	d123      	bne.n	80005b2 <BSP_LCD_Set_Orientation+0xa6>

		LCD_Write_Cmd(ILI9341_RASET); //page address set
 800056a:	202b      	movs	r0, #43	; 0x2b
 800056c:	f000 fb42 	bl	8000bf4 <LCD_Write_Cmd>
		params[0]= 0x00;
 8000570:	2300      	movs	r3, #0
 8000572:	733b      	strb	r3, [r7, #12]
		params[1]= 0x00;
 8000574:	2300      	movs	r3, #0
 8000576:	737b      	strb	r3, [r7, #13]
		params[2]= 0x01;
 8000578:	2301      	movs	r3, #1
 800057a:	73bb      	strb	r3, [r7, #14]
		params[3]= 0x40; //320 rows = 0x140
 800057c:	2340      	movs	r3, #64	; 0x40
 800057e:	73fb      	strb	r3, [r7, #15]
		LCD_Write_Data(params, 4);
 8000580:	f107 030c 	add.w	r3, r7, #12
 8000584:	2104      	movs	r1, #4
 8000586:	4618      	mov	r0, r3
 8000588:	f000 fb78 	bl	8000c7c <LCD_Write_Data>

		LCD_Write_Cmd(ILI9341_CASET);
 800058c:	202a      	movs	r0, #42	; 0x2a
 800058e:	f000 fb31 	bl	8000bf4 <LCD_Write_Cmd>
		params[0]= 0x00;
 8000592:	2300      	movs	r3, #0
 8000594:	733b      	strb	r3, [r7, #12]
		params[1]= 0x00;
 8000596:	2300      	movs	r3, #0
 8000598:	737b      	strb	r3, [r7, #13]
		params[2]= 0x00;
 800059a:	2300      	movs	r3, #0
 800059c:	73bb      	strb	r3, [r7, #14]
		params[3]= 0xf0; //240 columns = 0xf0
 800059e:	23f0      	movs	r3, #240	; 0xf0
 80005a0:	73fb      	strb	r3, [r7, #15]
		LCD_Write_Data(params, 4);
 80005a2:	f107 030c 	add.w	r3, r7, #12
 80005a6:	2104      	movs	r1, #4
 80005a8:	4618      	mov	r0, r3
 80005aa:	f000 fb67 	bl	8000c7c <LCD_Write_Data>

		params[0] = MADCTL_MY| MADCTL_MX| MADCTL_BGR;  /* Memory Access Control <portrait setting> */
 80005ae:	23c8      	movs	r3, #200	; 0xc8
 80005b0:	733b      	strb	r3, [r7, #12]
	}

	LCD_Write_Cmd(ILI9341_MAC);    // Memory Access Control command
 80005b2:	2036      	movs	r0, #54	; 0x36
 80005b4:	f000 fb1e 	bl	8000bf4 <LCD_Write_Cmd>
	LCD_Write_Data(params, 1);
 80005b8:	f107 030c 	add.w	r3, r7, #12
 80005bc:	2101      	movs	r1, #1
 80005be:	4618      	mov	r0, r3
 80005c0:	f000 fb5c 	bl	8000c7c <LCD_Write_Data>
}
 80005c4:	bf00      	nop
 80005c6:	3710      	adds	r7, #16
 80005c8:	46bd      	mov	sp, r7
 80005ca:	bd80      	pop	{r7, pc}

080005cc <LCD_Pin_Init>:


void LCD_Pin_Init(void)
{
 80005cc:	b480      	push	{r7}
 80005ce:	b087      	sub	sp, #28
 80005d0:	af00      	add	r7, sp, #0
	RCC_TypeDef *pRCC = RCC;
 80005d2:	4b74      	ldr	r3, [pc, #464]	; (80007a4 <LCD_Pin_Init+0x1d8>)
 80005d4:	617b      	str	r3, [r7, #20]
	GPIO_TypeDef *pGPIOA = GPIOA;
 80005d6:	4b74      	ldr	r3, [pc, #464]	; (80007a8 <LCD_Pin_Init+0x1dc>)
 80005d8:	613b      	str	r3, [r7, #16]
	GPIO_TypeDef *pGPIOC = GPIOC;
 80005da:	4b74      	ldr	r3, [pc, #464]	; (80007ac <LCD_Pin_Init+0x1e0>)
 80005dc:	60fb      	str	r3, [r7, #12]
	GPIO_TypeDef *pGPIOD = GPIOD;
 80005de:	4b74      	ldr	r3, [pc, #464]	; (80007b0 <LCD_Pin_Init+0x1e4>)
 80005e0:	60bb      	str	r3, [r7, #8]
	GPIO_TypeDef *pGPIOF = GPIOF;
 80005e2:	4b74      	ldr	r3, [pc, #464]	; (80007b4 <LCD_Pin_Init+0x1e8>)
 80005e4:	607b      	str	r3, [r7, #4]

	/* Enable the clock for GPIOA,C,D,F peripherals */
	REG_SET_BIT(pRCC->AHB1ENR,RCC_AHB1ENR_GPIOAEN_Pos);
 80005e6:	697b      	ldr	r3, [r7, #20]
 80005e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ea:	f043 0201 	orr.w	r2, r3, #1
 80005ee:	697b      	ldr	r3, [r7, #20]
 80005f0:	631a      	str	r2, [r3, #48]	; 0x30
	REG_SET_BIT(pRCC->AHB1ENR,RCC_AHB1ENR_GPIOCEN_Pos);
 80005f2:	697b      	ldr	r3, [r7, #20]
 80005f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005f6:	f043 0204 	orr.w	r2, r3, #4
 80005fa:	697b      	ldr	r3, [r7, #20]
 80005fc:	631a      	str	r2, [r3, #48]	; 0x30
	REG_SET_BIT(pRCC->AHB1ENR,RCC_AHB1ENR_GPIODEN_Pos);
 80005fe:	697b      	ldr	r3, [r7, #20]
 8000600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000602:	f043 0208 	orr.w	r2, r3, #8
 8000606:	697b      	ldr	r3, [r7, #20]
 8000608:	631a      	str	r2, [r3, #48]	; 0x30
	REG_SET_BIT(pRCC->AHB1ENR,RCC_AHB1ENR_GPIOFEN_Pos);
 800060a:	697b      	ldr	r3, [r7, #20]
 800060c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800060e:	f043 0220 	orr.w	r2, r3, #32
 8000612:	697b      	ldr	r3, [r7, #20]
 8000614:	631a      	str	r2, [r3, #48]	; 0x30

	//RESX
	REG_SET_VAL(pGPIOA->MODER,0x1U,0x3,(LCD_RESX_PIN * 2U)); 		/*mode*/
 8000616:	693b      	ldr	r3, [r7, #16]
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800061e:	693b      	ldr	r3, [r7, #16]
 8000620:	601a      	str	r2, [r3, #0]
 8000622:	693b      	ldr	r3, [r7, #16]
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 800062a:	693b      	ldr	r3, [r7, #16]
 800062c:	601a      	str	r2, [r3, #0]
	REG_CLR_BIT(pGPIOA->OTYPER,LCD_RESX_PIN); 						/*Output type*/
 800062e:	693b      	ldr	r3, [r7, #16]
 8000630:	685b      	ldr	r3, [r3, #4]
 8000632:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8000636:	693b      	ldr	r3, [r7, #16]
 8000638:	605a      	str	r2, [r3, #4]
	REG_SET_VAL(pGPIOA->OSPEEDR,2U,0x3U,(LCD_RESX_PIN * 2U)); 		/*speed*/
 800063a:	693b      	ldr	r3, [r7, #16]
 800063c:	689b      	ldr	r3, [r3, #8]
 800063e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8000642:	693b      	ldr	r3, [r7, #16]
 8000644:	609a      	str	r2, [r3, #8]
 8000646:	693b      	ldr	r3, [r7, #16]
 8000648:	689b      	ldr	r3, [r3, #8]
 800064a:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 800064e:	693b      	ldr	r3, [r7, #16]
 8000650:	609a      	str	r2, [r3, #8]


	//CSX
	REG_SET_VAL(pGPIOC->MODER,0x1U,0x3,(LCD_CSX_PIN * 2U)); 		/*mode*/
 8000652:	68fb      	ldr	r3, [r7, #12]
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800065a:	68fb      	ldr	r3, [r7, #12]
 800065c:	601a      	str	r2, [r3, #0]
 800065e:	68fb      	ldr	r3, [r7, #12]
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	f043 0210 	orr.w	r2, r3, #16
 8000666:	68fb      	ldr	r3, [r7, #12]
 8000668:	601a      	str	r2, [r3, #0]
	REG_CLR_BIT(pGPIOC->OTYPER,LCD_CSX_PIN); 						/*Output type*/
 800066a:	68fb      	ldr	r3, [r7, #12]
 800066c:	685b      	ldr	r3, [r3, #4]
 800066e:	f023 0204 	bic.w	r2, r3, #4
 8000672:	68fb      	ldr	r3, [r7, #12]
 8000674:	605a      	str	r2, [r3, #4]
	REG_SET_VAL(pGPIOC->OSPEEDR,2U,0x3U,(LCD_CSX_PIN * 2U)); 		/*speed*/
 8000676:	68fb      	ldr	r3, [r7, #12]
 8000678:	689b      	ldr	r3, [r3, #8]
 800067a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800067e:	68fb      	ldr	r3, [r7, #12]
 8000680:	609a      	str	r2, [r3, #8]
 8000682:	68fb      	ldr	r3, [r7, #12]
 8000684:	689b      	ldr	r3, [r3, #8]
 8000686:	f043 0220 	orr.w	r2, r3, #32
 800068a:	68fb      	ldr	r3, [r7, #12]
 800068c:	609a      	str	r2, [r3, #8]

	//D/CX
	REG_SET_VAL(pGPIOD->MODER,0x1U,0x3,(LCD_DCX_PIN * 2U)); 		/*mode*/
 800068e:	68bb      	ldr	r3, [r7, #8]
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8000696:	68bb      	ldr	r3, [r7, #8]
 8000698:	601a      	str	r2, [r3, #0]
 800069a:	68bb      	ldr	r3, [r7, #8]
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 80006a2:	68bb      	ldr	r3, [r7, #8]
 80006a4:	601a      	str	r2, [r3, #0]
	REG_CLR_BIT(pGPIOD->OTYPER,LCD_DCX_PIN); 					/*Output type*/
 80006a6:	68bb      	ldr	r3, [r7, #8]
 80006a8:	685b      	ldr	r3, [r3, #4]
 80006aa:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80006ae:	68bb      	ldr	r3, [r7, #8]
 80006b0:	605a      	str	r2, [r3, #4]
	REG_SET_VAL(pGPIOD->OSPEEDR,2U,0x3U,(LCD_DCX_PIN * 2U)); 		/*speed*/
 80006b2:	68bb      	ldr	r3, [r7, #8]
 80006b4:	689b      	ldr	r3, [r3, #8]
 80006b6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80006ba:	68bb      	ldr	r3, [r7, #8]
 80006bc:	609a      	str	r2, [r3, #8]
 80006be:	68bb      	ldr	r3, [r7, #8]
 80006c0:	689b      	ldr	r3, [r3, #8]
 80006c2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80006c6:	68bb      	ldr	r3, [r7, #8]
 80006c8:	609a      	str	r2, [r3, #8]

	//SPI_CLK(PF7)
	REG_SET_VAL(pGPIOF->MODER,2U,0x3U,(LCD_SCL_PIN * 2U));
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	601a      	str	r2, [r3, #0]
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	601a      	str	r2, [r3, #0]
	REG_CLR_BIT(pGPIOF->OTYPER,LCD_SCL_PIN);
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	685b      	ldr	r3, [r3, #4]
 80006e6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	605a      	str	r2, [r3, #4]
	REG_SET_VAL(pGPIOF->OSPEEDR,2U,0x3U,(LCD_SCL_PIN * 2U));
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	689b      	ldr	r3, [r3, #8]
 80006f2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	609a      	str	r2, [r3, #8]
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	689b      	ldr	r3, [r3, #8]
 80006fe:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	609a      	str	r2, [r3, #8]
	REG_SET_VAL(pGPIOF->AFR[0],5U,0xFU,(LCD_SCL_PIN * 4U));
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	6a1b      	ldr	r3, [r3, #32]
 800070a:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	621a      	str	r2, [r3, #32]
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	6a1b      	ldr	r3, [r3, #32]
 8000716:	f043 42a0 	orr.w	r2, r3, #1342177280	; 0x50000000
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	621a      	str	r2, [r3, #32]

	//SPI_SDA(PF9)
	REG_SET_VAL(pGPIOF->MODER,2U,0x3U,(LCD_SDA_PIN * 2U));
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	601a      	str	r2, [r3, #0]
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	601a      	str	r2, [r3, #0]
	REG_CLR_BIT(pGPIOF->OTYPER,LCD_SDA_PIN);
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	685b      	ldr	r3, [r3, #4]
 800073a:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	605a      	str	r2, [r3, #4]
	REG_SET_VAL(pGPIOF->OSPEEDR,2U,0x3U,(LCD_SDA_PIN * 2U));
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	689b      	ldr	r3, [r3, #8]
 8000746:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	609a      	str	r2, [r3, #8]
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	689b      	ldr	r3, [r3, #8]
 8000752:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	609a      	str	r2, [r3, #8]
	REG_SET_VAL(pGPIOF->AFR[1],5U,0xFU,((LCD_SDA_PIN % 8) * 4U));
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800075e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	625a      	str	r2, [r3, #36]	; 0x24
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800076a:	f043 0250 	orr.w	r2, r3, #80	; 0x50
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	625a      	str	r2, [r3, #36]	; 0x24

	//CSX = HIGH
	REG_SET_BIT(pGPIOC->ODR,LCD_CSX_PIN);
 8000772:	68fb      	ldr	r3, [r7, #12]
 8000774:	695b      	ldr	r3, [r3, #20]
 8000776:	f043 0204 	orr.w	r2, r3, #4
 800077a:	68fb      	ldr	r3, [r7, #12]
 800077c:	615a      	str	r2, [r3, #20]
	//RESX = HIGH
	REG_SET_BIT(pGPIOA->ODR,LCD_RESX_PIN);
 800077e:	693b      	ldr	r3, [r7, #16]
 8000780:	695b      	ldr	r3, [r3, #20]
 8000782:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8000786:	693b      	ldr	r3, [r7, #16]
 8000788:	615a      	str	r2, [r3, #20]
	//D/CX = HIGH
	REG_SET_BIT(pGPIOD->ODR,LCD_DCX_PIN);
 800078a:	68bb      	ldr	r3, [r7, #8]
 800078c:	695b      	ldr	r3, [r3, #20]
 800078e:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000792:	68bb      	ldr	r3, [r7, #8]
 8000794:	615a      	str	r2, [r3, #20]

}
 8000796:	bf00      	nop
 8000798:	371c      	adds	r7, #28
 800079a:	46bd      	mov	sp, r7
 800079c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a0:	4770      	bx	lr
 80007a2:	bf00      	nop
 80007a4:	40023800 	.word	0x40023800
 80007a8:	40020000 	.word	0x40020000
 80007ac:	40020800 	.word	0x40020800
 80007b0:	40020c00 	.word	0x40020c00
 80007b4:	40021400 	.word	0x40021400

080007b8 <LCD_SPI_Enable>:


void LCD_SPI_Enable(void)
{
 80007b8:	b480      	push	{r7}
 80007ba:	b083      	sub	sp, #12
 80007bc:	af00      	add	r7, sp, #0
	SPI_TypeDef *pSPI = SPI;
 80007be:	4b07      	ldr	r3, [pc, #28]	; (80007dc <LCD_SPI_Enable+0x24>)
 80007c0:	607b      	str	r3, [r7, #4]
	REG_SET_BIT(pSPI->CR1,SPI_CR1_SPE_Pos);
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	601a      	str	r2, [r3, #0]
}
 80007ce:	bf00      	nop
 80007d0:	370c      	adds	r7, #12
 80007d2:	46bd      	mov	sp, r7
 80007d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d8:	4770      	bx	lr
 80007da:	bf00      	nop
 80007dc:	40015000 	.word	0x40015000

080007e0 <LCD_SPI_Init>:

void LCD_SPI_Init(void)
{
 80007e0:	b480      	push	{r7}
 80007e2:	b083      	sub	sp, #12
 80007e4:	af00      	add	r7, sp, #0
	SPI_TypeDef *pSPI = SPI;
 80007e6:	4b2f      	ldr	r3, [pc, #188]	; (80008a4 <LCD_SPI_Init+0xc4>)
 80007e8:	607b      	str	r3, [r7, #4]
	RCC_TypeDef *pRCC = RCC;
 80007ea:	4b2f      	ldr	r3, [pc, #188]	; (80008a8 <LCD_SPI_Init+0xc8>)
 80007ec:	603b      	str	r3, [r7, #0]

	REG_SET_BIT(pRCC->APB2ENR,RCC_APB2ENR_SPI5EN_Pos);
 80007ee:	683b      	ldr	r3, [r7, #0]
 80007f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007f2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80007f6:	683b      	ldr	r3, [r7, #0]
 80007f8:	645a      	str	r2, [r3, #68]	; 0x44

	REG_SET_BIT(pSPI->CR1,SPI_CR1_MSTR_Pos); 		/*Controller mode*/
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	f043 0204 	orr.w	r2, r3, #4
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	601a      	str	r2, [r3, #0]
	REG_SET_BIT(pSPI->CR1,SPI_CR1_BIDIMODE_Pos);    /* BIDI mode enable*/
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	601a      	str	r2, [r3, #0]
	REG_SET_BIT(pSPI->CR1,SPI_CR1_BIDIOE_Pos);      /* Tx only*/
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	601a      	str	r2, [r3, #0]
	REG_SET_BIT(pSPI->CR1,SPI_CR1_BIDIOE_Pos);		/* Tx only */
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	601a      	str	r2, [r3, #0]
	REG_CLR_BIT(pSPI->CR1,SPI_CR1_DFF_Pos);			/* DFF = 8bits */
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	601a      	str	r2, [r3, #0]
	REG_SET_BIT(pSPI->CR1,SPI_CR1_SSM_Pos);			/* SSM enable */
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	601a      	str	r2, [r3, #0]
	REG_SET_BIT(pSPI->CR1,SPI_CR1_SSI_Pos);			/* SSI enable */
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	601a      	str	r2, [r3, #0]
	REG_CLR_BIT(pSPI->CR1,SPI_CR1_LSBFIRST_Pos);     /* Send msb first */
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	601a      	str	r2, [r3, #0]
	REG_SET_VAL(pSPI->CR1,0x3U,0x7U,SPI_CR1_BR_Pos); /* SPI clck = 90MHz/16 ==> 5.625 MHz */
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	601a      	str	r2, [r3, #0]
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	f043 0218 	orr.w	r2, r3, #24
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	601a      	str	r2, [r3, #0]
	REG_CLR_BIT(pSPI->CR1,SPI_CR1_CPOL_Pos); 		 /* CPOL = 0 */
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	f023 0202 	bic.w	r2, r3, #2
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	601a      	str	r2, [r3, #0]
	REG_CLR_BIT(pSPI->CR1,SPI_CR1_CPHA_Pos); 		 /* CPHA = 0 */
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	f023 0201 	bic.w	r2, r3, #1
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	601a      	str	r2, [r3, #0]
	REG_CLR_BIT(pSPI->CR2,SPI_CR2_FRF_Pos);			 /* SPI Motorola frame format*/
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	685b      	ldr	r3, [r3, #4]
 800088e:	f023 0210 	bic.w	r2, r3, #16
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	605a      	str	r2, [r3, #4]

}
 8000896:	bf00      	nop
 8000898:	370c      	adds	r7, #12
 800089a:	46bd      	mov	sp, r7
 800089c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a0:	4770      	bx	lr
 80008a2:	bf00      	nop
 80008a4:	40015000 	.word	0x40015000
 80008a8:	40023800 	.word	0x40023800

080008ac <delay_50ms>:

void delay_50ms(void){
 80008ac:	b480      	push	{r7}
 80008ae:	b083      	sub	sp, #12
 80008b0:	af00      	add	r7, sp, #0
	for(uint32_t i = 0 ; i<(0xFFFFU * 10U);i++);
 80008b2:	2300      	movs	r3, #0
 80008b4:	607b      	str	r3, [r7, #4]
 80008b6:	e002      	b.n	80008be <delay_50ms+0x12>
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	3301      	adds	r3, #1
 80008bc:	607b      	str	r3, [r7, #4]
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	4a04      	ldr	r2, [pc, #16]	; (80008d4 <delay_50ms+0x28>)
 80008c2:	4293      	cmp	r3, r2
 80008c4:	d9f8      	bls.n	80008b8 <delay_50ms+0xc>
}
 80008c6:	bf00      	nop
 80008c8:	bf00      	nop
 80008ca:	370c      	adds	r7, #12
 80008cc:	46bd      	mov	sp, r7
 80008ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d2:	4770      	bx	lr
 80008d4:	0009fff5 	.word	0x0009fff5

080008d8 <LCD_Reset>:

void LCD_Reset(void)
{
 80008d8:	b480      	push	{r7}
 80008da:	b083      	sub	sp, #12
 80008dc:	af00      	add	r7, sp, #0
	LCD_RESX_LOW();
 80008de:	4b13      	ldr	r3, [pc, #76]	; (800092c <LCD_Reset+0x54>)
 80008e0:	695b      	ldr	r3, [r3, #20]
 80008e2:	4a12      	ldr	r2, [pc, #72]	; (800092c <LCD_Reset+0x54>)
 80008e4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80008e8:	6153      	str	r3, [r2, #20]
	for(uint32_t i = 0 ; i<(0xFFFFU * 10U);i++);
 80008ea:	2300      	movs	r3, #0
 80008ec:	607b      	str	r3, [r7, #4]
 80008ee:	e002      	b.n	80008f6 <LCD_Reset+0x1e>
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	3301      	adds	r3, #1
 80008f4:	607b      	str	r3, [r7, #4]
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	4a0d      	ldr	r2, [pc, #52]	; (8000930 <LCD_Reset+0x58>)
 80008fa:	4293      	cmp	r3, r2
 80008fc:	d9f8      	bls.n	80008f0 <LCD_Reset+0x18>
	LCD_RESX_HIGH();
 80008fe:	4b0b      	ldr	r3, [pc, #44]	; (800092c <LCD_Reset+0x54>)
 8000900:	695b      	ldr	r3, [r3, #20]
 8000902:	4a0a      	ldr	r2, [pc, #40]	; (800092c <LCD_Reset+0x54>)
 8000904:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000908:	6153      	str	r3, [r2, #20]
	for(uint32_t i = 0 ; i<(0xFFFFU * 10U);i++);
 800090a:	2300      	movs	r3, #0
 800090c:	603b      	str	r3, [r7, #0]
 800090e:	e002      	b.n	8000916 <LCD_Reset+0x3e>
 8000910:	683b      	ldr	r3, [r7, #0]
 8000912:	3301      	adds	r3, #1
 8000914:	603b      	str	r3, [r7, #0]
 8000916:	683b      	ldr	r3, [r7, #0]
 8000918:	4a05      	ldr	r2, [pc, #20]	; (8000930 <LCD_Reset+0x58>)
 800091a:	4293      	cmp	r3, r2
 800091c:	d9f8      	bls.n	8000910 <LCD_Reset+0x38>
}
 800091e:	bf00      	nop
 8000920:	bf00      	nop
 8000922:	370c      	adds	r7, #12
 8000924:	46bd      	mov	sp, r7
 8000926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092a:	4770      	bx	lr
 800092c:	40020000 	.word	0x40020000
 8000930:	0009fff5 	.word	0x0009fff5

08000934 <LCD_Config>:


void LCD_Config(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b084      	sub	sp, #16
 8000938:	af00      	add	r7, sp, #0
	/* array to hold the command parameters*/
	uint8_t params[15] = {0};
 800093a:	2300      	movs	r3, #0
 800093c:	603b      	str	r3, [r7, #0]
 800093e:	1d3b      	adds	r3, r7, #4
 8000940:	2200      	movs	r2, #0
 8000942:	601a      	str	r2, [r3, #0]
 8000944:	605a      	str	r2, [r3, #4]
 8000946:	f8c3 2007 	str.w	r2, [r3, #7]

	LCD_Write_Cmd(ILI9341_SWRESET);
 800094a:	2001      	movs	r0, #1
 800094c:	f000 f952 	bl	8000bf4 <LCD_Write_Cmd>
	LCD_Write_Cmd(ILI9341_POWERB);
 8000950:	20cf      	movs	r0, #207	; 0xcf
 8000952:	f000 f94f 	bl	8000bf4 <LCD_Write_Cmd>
	params[0] = 0x00;
 8000956:	2300      	movs	r3, #0
 8000958:	703b      	strb	r3, [r7, #0]
	params[1] = 0xD9;
 800095a:	23d9      	movs	r3, #217	; 0xd9
 800095c:	707b      	strb	r3, [r7, #1]
	params[2] = 0x30;
 800095e:	2330      	movs	r3, #48	; 0x30
 8000960:	70bb      	strb	r3, [r7, #2]
	LCD_Write_Data(params, 3);
 8000962:	463b      	mov	r3, r7
 8000964:	2103      	movs	r1, #3
 8000966:	4618      	mov	r0, r3
 8000968:	f000 f988 	bl	8000c7c <LCD_Write_Data>

	LCD_Write_Cmd(ILI9341_POWER_SEQ);
 800096c:	20ed      	movs	r0, #237	; 0xed
 800096e:	f000 f941 	bl	8000bf4 <LCD_Write_Cmd>
	params[0]= 0x64;
 8000972:	2364      	movs	r3, #100	; 0x64
 8000974:	703b      	strb	r3, [r7, #0]
	params[1]= 0x03;
 8000976:	2303      	movs	r3, #3
 8000978:	707b      	strb	r3, [r7, #1]
	params[2]= 0X12;
 800097a:	2312      	movs	r3, #18
 800097c:	70bb      	strb	r3, [r7, #2]
	params[3]= 0X81;
 800097e:	2381      	movs	r3, #129	; 0x81
 8000980:	70fb      	strb	r3, [r7, #3]
	LCD_Write_Data(params, 4);
 8000982:	463b      	mov	r3, r7
 8000984:	2104      	movs	r1, #4
 8000986:	4618      	mov	r0, r3
 8000988:	f000 f978 	bl	8000c7c <LCD_Write_Data>

	LCD_Write_Cmd(ILI9341_DTCA);
 800098c:	20e8      	movs	r0, #232	; 0xe8
 800098e:	f000 f931 	bl	8000bf4 <LCD_Write_Cmd>
	params[0]= 0x85;
 8000992:	2385      	movs	r3, #133	; 0x85
 8000994:	703b      	strb	r3, [r7, #0]
	params[1]= 0x10;
 8000996:	2310      	movs	r3, #16
 8000998:	707b      	strb	r3, [r7, #1]
	params[2]= 0x7A;
 800099a:	237a      	movs	r3, #122	; 0x7a
 800099c:	70bb      	strb	r3, [r7, #2]
	LCD_Write_Data(params, 3);
 800099e:	463b      	mov	r3, r7
 80009a0:	2103      	movs	r1, #3
 80009a2:	4618      	mov	r0, r3
 80009a4:	f000 f96a 	bl	8000c7c <LCD_Write_Data>

	LCD_Write_Cmd(ILI9341_POWERA);
 80009a8:	20cb      	movs	r0, #203	; 0xcb
 80009aa:	f000 f923 	bl	8000bf4 <LCD_Write_Cmd>
	params[0]= 0x39;
 80009ae:	2339      	movs	r3, #57	; 0x39
 80009b0:	703b      	strb	r3, [r7, #0]
	params[1]= 0x2C;
 80009b2:	232c      	movs	r3, #44	; 0x2c
 80009b4:	707b      	strb	r3, [r7, #1]
	params[2]= 0x00;
 80009b6:	2300      	movs	r3, #0
 80009b8:	70bb      	strb	r3, [r7, #2]
	params[3]= 0x34;
 80009ba:	2334      	movs	r3, #52	; 0x34
 80009bc:	70fb      	strb	r3, [r7, #3]
	params[4]= 0x02;
 80009be:	2302      	movs	r3, #2
 80009c0:	713b      	strb	r3, [r7, #4]
	LCD_Write_Data(params, 5);
 80009c2:	463b      	mov	r3, r7
 80009c4:	2105      	movs	r1, #5
 80009c6:	4618      	mov	r0, r3
 80009c8:	f000 f958 	bl	8000c7c <LCD_Write_Data>

	LCD_Write_Cmd(ILI9341_PRC);
 80009cc:	20f7      	movs	r0, #247	; 0xf7
 80009ce:	f000 f911 	bl	8000bf4 <LCD_Write_Cmd>
	params[0]= 0x20;
 80009d2:	2320      	movs	r3, #32
 80009d4:	703b      	strb	r3, [r7, #0]
	LCD_Write_Data(params, 1);
 80009d6:	463b      	mov	r3, r7
 80009d8:	2101      	movs	r1, #1
 80009da:	4618      	mov	r0, r3
 80009dc:	f000 f94e 	bl	8000c7c <LCD_Write_Data>

	LCD_Write_Cmd(ILI9341_DTCB);
 80009e0:	20ea      	movs	r0, #234	; 0xea
 80009e2:	f000 f907 	bl	8000bf4 <LCD_Write_Cmd>
	params[0]= 0x00;
 80009e6:	2300      	movs	r3, #0
 80009e8:	703b      	strb	r3, [r7, #0]
	params[1]= 0x00;
 80009ea:	2300      	movs	r3, #0
 80009ec:	707b      	strb	r3, [r7, #1]
	LCD_Write_Data(params, 2);
 80009ee:	463b      	mov	r3, r7
 80009f0:	2102      	movs	r1, #2
 80009f2:	4618      	mov	r0, r3
 80009f4:	f000 f942 	bl	8000c7c <LCD_Write_Data>

	LCD_Write_Cmd(ILI9341_POWER1);
 80009f8:	20c0      	movs	r0, #192	; 0xc0
 80009fa:	f000 f8fb 	bl	8000bf4 <LCD_Write_Cmd>
	params[0]= 0x1B;
 80009fe:	231b      	movs	r3, #27
 8000a00:	703b      	strb	r3, [r7, #0]
	LCD_Write_Data(params, 1);
 8000a02:	463b      	mov	r3, r7
 8000a04:	2101      	movs	r1, #1
 8000a06:	4618      	mov	r0, r3
 8000a08:	f000 f938 	bl	8000c7c <LCD_Write_Data>

	LCD_Write_Cmd(ILI9341_POWER2);
 8000a0c:	20c1      	movs	r0, #193	; 0xc1
 8000a0e:	f000 f8f1 	bl	8000bf4 <LCD_Write_Cmd>
	params[0]= 0x12;
 8000a12:	2312      	movs	r3, #18
 8000a14:	703b      	strb	r3, [r7, #0]
	LCD_Write_Data(params, 1);
 8000a16:	463b      	mov	r3, r7
 8000a18:	2101      	movs	r1, #1
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	f000 f92e 	bl	8000c7c <LCD_Write_Data>

	LCD_Write_Cmd(ILI9341_VCOM1);
 8000a20:	20c5      	movs	r0, #197	; 0xc5
 8000a22:	f000 f8e7 	bl	8000bf4 <LCD_Write_Cmd>
	params[0]= 0x08;
 8000a26:	2308      	movs	r3, #8
 8000a28:	703b      	strb	r3, [r7, #0]
	params[1]= 0x26;
 8000a2a:	2326      	movs	r3, #38	; 0x26
 8000a2c:	707b      	strb	r3, [r7, #1]
	LCD_Write_Data(params, 2);
 8000a2e:	463b      	mov	r3, r7
 8000a30:	2102      	movs	r1, #2
 8000a32:	4618      	mov	r0, r3
 8000a34:	f000 f922 	bl	8000c7c <LCD_Write_Data>

	LCD_Write_Cmd(ILI9341_VCOM2);
 8000a38:	20c7      	movs	r0, #199	; 0xc7
 8000a3a:	f000 f8db 	bl	8000bf4 <LCD_Write_Cmd>
	params[0]= 0XB7;
 8000a3e:	23b7      	movs	r3, #183	; 0xb7
 8000a40:	703b      	strb	r3, [r7, #0]
	LCD_Write_Data(params, 1);
 8000a42:	463b      	mov	r3, r7
 8000a44:	2101      	movs	r1, #1
 8000a46:	4618      	mov	r0, r3
 8000a48:	f000 f918 	bl	8000c7c <LCD_Write_Data>

	uint8_t m;
	m = MADCTL_MV | MADCTL_MY| MADCTL_BGR;
 8000a4c:	23a8      	movs	r3, #168	; 0xa8
 8000a4e:	73fb      	strb	r3, [r7, #15]

	LCD_Write_Cmd(ILI9341_MAC);    // Memory Access Control <Landscape setting>
 8000a50:	2036      	movs	r0, #54	; 0x36
 8000a52:	f000 f8cf 	bl	8000bf4 <LCD_Write_Cmd>
	params[0]= m;
 8000a56:	7bfb      	ldrb	r3, [r7, #15]
 8000a58:	703b      	strb	r3, [r7, #0]
	LCD_Write_Data(params, 1);
 8000a5a:	463b      	mov	r3, r7
 8000a5c:	2101      	movs	r1, #1
 8000a5e:	4618      	mov	r0, r3
 8000a60:	f000 f90c 	bl	8000c7c <LCD_Write_Data>

	LCD_Write_Cmd(ILI9341_PIXEL_FORMAT);
 8000a64:	203a      	movs	r0, #58	; 0x3a
 8000a66:	f000 f8c5 	bl	8000bf4 <LCD_Write_Cmd>
	params[0]= 0x55; //select RGB565
 8000a6a:	2355      	movs	r3, #85	; 0x55
 8000a6c:	703b      	strb	r3, [r7, #0]
	LCD_Write_Data(params, 1);
 8000a6e:	463b      	mov	r3, r7
 8000a70:	2101      	movs	r1, #1
 8000a72:	4618      	mov	r0, r3
 8000a74:	f000 f902 	bl	8000c7c <LCD_Write_Data>

	LCD_Write_Cmd(ILI9341_FRMCTR1);
 8000a78:	20b1      	movs	r0, #177	; 0xb1
 8000a7a:	f000 f8bb 	bl	8000bf4 <LCD_Write_Cmd>
	params[0]= 0x00;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	703b      	strb	r3, [r7, #0]
	params[1]= 0x1B;//frame rate = 70
 8000a82:	231b      	movs	r3, #27
 8000a84:	707b      	strb	r3, [r7, #1]
	LCD_Write_Data(params, 2);
 8000a86:	463b      	mov	r3, r7
 8000a88:	2102      	movs	r1, #2
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	f000 f8f6 	bl	8000c7c <LCD_Write_Data>

	LCD_Write_Cmd(ILI9341_DFC);    // Display Function Control
 8000a90:	20b6      	movs	r0, #182	; 0xb6
 8000a92:	f000 f8af 	bl	8000bf4 <LCD_Write_Cmd>
	params[0]= 0x0A;
 8000a96:	230a      	movs	r3, #10
 8000a98:	703b      	strb	r3, [r7, #0]
	params[1]= 0xA2;
 8000a9a:	23a2      	movs	r3, #162	; 0xa2
 8000a9c:	707b      	strb	r3, [r7, #1]
	LCD_Write_Data(params, 2);
 8000a9e:	463b      	mov	r3, r7
 8000aa0:	2102      	movs	r1, #2
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	f000 f8ea 	bl	8000c7c <LCD_Write_Data>

	LCD_Write_Cmd(ILI9341_3GAMMA_EN);    // 3Gamma Function Disable
 8000aa8:	20f2      	movs	r0, #242	; 0xf2
 8000aaa:	f000 f8a3 	bl	8000bf4 <LCD_Write_Cmd>
	params[0]= 0x02;
 8000aae:	2302      	movs	r3, #2
 8000ab0:	703b      	strb	r3, [r7, #0]
	LCD_Write_Data(params, 1);
 8000ab2:	463b      	mov	r3, r7
 8000ab4:	2101      	movs	r1, #1
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	f000 f8e0 	bl	8000c7c <LCD_Write_Data>

	LCD_Write_Cmd(ILI9341_GAMMA);
 8000abc:	2026      	movs	r0, #38	; 0x26
 8000abe:	f000 f899 	bl	8000bf4 <LCD_Write_Cmd>
	params[0]= 0x01;
 8000ac2:	2301      	movs	r3, #1
 8000ac4:	703b      	strb	r3, [r7, #0]
	LCD_Write_Data(params, 1);
 8000ac6:	463b      	mov	r3, r7
 8000ac8:	2101      	movs	r1, #1
 8000aca:	4618      	mov	r0, r3
 8000acc:	f000 f8d6 	bl	8000c7c <LCD_Write_Data>

	LCD_Write_Cmd(ILI9341_PGAMMA);    //Set Gamma
 8000ad0:	20e0      	movs	r0, #224	; 0xe0
 8000ad2:	f000 f88f 	bl	8000bf4 <LCD_Write_Cmd>
	params[0]= 0x0F;
 8000ad6:	230f      	movs	r3, #15
 8000ad8:	703b      	strb	r3, [r7, #0]
	params[1]= 0x1D;
 8000ada:	231d      	movs	r3, #29
 8000adc:	707b      	strb	r3, [r7, #1]
	params[2]= 0x1A;
 8000ade:	231a      	movs	r3, #26
 8000ae0:	70bb      	strb	r3, [r7, #2]
	params[3]= 0x0A;
 8000ae2:	230a      	movs	r3, #10
 8000ae4:	70fb      	strb	r3, [r7, #3]
	params[4]= 0x0D;
 8000ae6:	230d      	movs	r3, #13
 8000ae8:	713b      	strb	r3, [r7, #4]
	params[5]= 0x07;
 8000aea:	2307      	movs	r3, #7
 8000aec:	717b      	strb	r3, [r7, #5]
	params[6]= 0x49;
 8000aee:	2349      	movs	r3, #73	; 0x49
 8000af0:	71bb      	strb	r3, [r7, #6]
	params[7]= 0X66;
 8000af2:	2366      	movs	r3, #102	; 0x66
 8000af4:	71fb      	strb	r3, [r7, #7]
	params[8]= 0x3B;
 8000af6:	233b      	movs	r3, #59	; 0x3b
 8000af8:	723b      	strb	r3, [r7, #8]
	params[9]= 0x07;
 8000afa:	2307      	movs	r3, #7
 8000afc:	727b      	strb	r3, [r7, #9]
	params[10]= 0x11;
 8000afe:	2311      	movs	r3, #17
 8000b00:	72bb      	strb	r3, [r7, #10]
	params[11]= 0x01;
 8000b02:	2301      	movs	r3, #1
 8000b04:	72fb      	strb	r3, [r7, #11]
	params[12]= 0x09;
 8000b06:	2309      	movs	r3, #9
 8000b08:	733b      	strb	r3, [r7, #12]
	params[13]= 0x05;
 8000b0a:	2305      	movs	r3, #5
 8000b0c:	737b      	strb	r3, [r7, #13]
	params[14]= 0x04;
 8000b0e:	2304      	movs	r3, #4
 8000b10:	73bb      	strb	r3, [r7, #14]
	LCD_Write_Data(params, 15);
 8000b12:	463b      	mov	r3, r7
 8000b14:	210f      	movs	r1, #15
 8000b16:	4618      	mov	r0, r3
 8000b18:	f000 f8b0 	bl	8000c7c <LCD_Write_Data>

	LCD_Write_Cmd(ILI9341_NGAMMA);
 8000b1c:	20e1      	movs	r0, #225	; 0xe1
 8000b1e:	f000 f869 	bl	8000bf4 <LCD_Write_Cmd>
	params[0]= 0x00;
 8000b22:	2300      	movs	r3, #0
 8000b24:	703b      	strb	r3, [r7, #0]
	params[1]= 0x18;
 8000b26:	2318      	movs	r3, #24
 8000b28:	707b      	strb	r3, [r7, #1]
	params[2]= 0x1D;
 8000b2a:	231d      	movs	r3, #29
 8000b2c:	70bb      	strb	r3, [r7, #2]
	params[3]= 0x02;
 8000b2e:	2302      	movs	r3, #2
 8000b30:	70fb      	strb	r3, [r7, #3]
	params[4]= 0x0F;
 8000b32:	230f      	movs	r3, #15
 8000b34:	713b      	strb	r3, [r7, #4]
	params[5]= 0x04;
 8000b36:	2304      	movs	r3, #4
 8000b38:	717b      	strb	r3, [r7, #5]
	params[6]= 0x36;
 8000b3a:	2336      	movs	r3, #54	; 0x36
 8000b3c:	71bb      	strb	r3, [r7, #6]
	params[7]= 0x13;
 8000b3e:	2313      	movs	r3, #19
 8000b40:	71fb      	strb	r3, [r7, #7]
	params[8]= 0x4C;
 8000b42:	234c      	movs	r3, #76	; 0x4c
 8000b44:	723b      	strb	r3, [r7, #8]
	params[9]= 0x07;
 8000b46:	2307      	movs	r3, #7
 8000b48:	727b      	strb	r3, [r7, #9]
	params[10]= 0x13;
 8000b4a:	2313      	movs	r3, #19
 8000b4c:	72bb      	strb	r3, [r7, #10]
	params[11]= 0x0F;
 8000b4e:	230f      	movs	r3, #15
 8000b50:	72fb      	strb	r3, [r7, #11]
	params[12]= 0x2E;
 8000b52:	232e      	movs	r3, #46	; 0x2e
 8000b54:	733b      	strb	r3, [r7, #12]
	params[13]= 0x2F;
 8000b56:	232f      	movs	r3, #47	; 0x2f
 8000b58:	737b      	strb	r3, [r7, #13]
	params[14]= 0x05;
 8000b5a:	2305      	movs	r3, #5
 8000b5c:	73bb      	strb	r3, [r7, #14]
	LCD_Write_Data(params, 15);
 8000b5e:	463b      	mov	r3, r7
 8000b60:	210f      	movs	r1, #15
 8000b62:	4618      	mov	r0, r3
 8000b64:	f000 f88a 	bl	8000c7c <LCD_Write_Data>

	LCD_Write_Cmd(ILI9341_RASET); //page address set
 8000b68:	202b      	movs	r0, #43	; 0x2b
 8000b6a:	f000 f843 	bl	8000bf4 <LCD_Write_Cmd>
	params[0]= 0x00;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	703b      	strb	r3, [r7, #0]
	params[1]= 0x00;
 8000b72:	2300      	movs	r3, #0
 8000b74:	707b      	strb	r3, [r7, #1]
	params[2]= 0x00;
 8000b76:	2300      	movs	r3, #0
 8000b78:	70bb      	strb	r3, [r7, #2]
	params[3]= 0xf0; //240 rows = 0xf0
 8000b7a:	23f0      	movs	r3, #240	; 0xf0
 8000b7c:	70fb      	strb	r3, [r7, #3]
	LCD_Write_Data(params, 4);
 8000b7e:	463b      	mov	r3, r7
 8000b80:	2104      	movs	r1, #4
 8000b82:	4618      	mov	r0, r3
 8000b84:	f000 f87a 	bl	8000c7c <LCD_Write_Data>

	LCD_Write_Cmd(ILI9341_CASET);
 8000b88:	202a      	movs	r0, #42	; 0x2a
 8000b8a:	f000 f833 	bl	8000bf4 <LCD_Write_Cmd>
	params[0]= 0x00;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	703b      	strb	r3, [r7, #0]
	params[1]= 0x00;
 8000b92:	2300      	movs	r3, #0
 8000b94:	707b      	strb	r3, [r7, #1]
	params[2]= 0x01;
 8000b96:	2301      	movs	r3, #1
 8000b98:	70bb      	strb	r3, [r7, #2]
	params[3]= 0x40; //320 columns = 0x140
 8000b9a:	2340      	movs	r3, #64	; 0x40
 8000b9c:	70fb      	strb	r3, [r7, #3]
	LCD_Write_Data(params, 4);
 8000b9e:	463b      	mov	r3, r7
 8000ba0:	2104      	movs	r1, #4
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	f000 f86a 	bl	8000c7c <LCD_Write_Data>

	LCD_Write_Cmd(ILI9341_RGB_INTERFACE);
 8000ba8:	20b0      	movs	r0, #176	; 0xb0
 8000baa:	f000 f823 	bl	8000bf4 <LCD_Write_Cmd>
	params[0] = 0xC2; //Data is fetched during falling edge of DOTCLK
 8000bae:	23c2      	movs	r3, #194	; 0xc2
 8000bb0:	703b      	strb	r3, [r7, #0]
	LCD_Write_Data(params, 1);
 8000bb2:	463b      	mov	r3, r7
 8000bb4:	2101      	movs	r1, #1
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	f000 f860 	bl	8000c7c <LCD_Write_Data>

	LCD_Write_Cmd(ILI9341_INTERFACE);
 8000bbc:	20f6      	movs	r0, #246	; 0xf6
 8000bbe:	f000 f819 	bl	8000bf4 <LCD_Write_Cmd>
	params[0] = 0x00;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	703b      	strb	r3, [r7, #0]
	params[1] = 0x00;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	707b      	strb	r3, [r7, #1]
	params[2] = 0x06;
 8000bca:	2306      	movs	r3, #6
 8000bcc:	70bb      	strb	r3, [r7, #2]
	LCD_Write_Data(params, 3);
 8000bce:	463b      	mov	r3, r7
 8000bd0:	2103      	movs	r1, #3
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	f000 f852 	bl	8000c7c <LCD_Write_Data>

	LCD_Write_Cmd(ILI9341_SLEEP_OUT); //Exit Sleep
 8000bd8:	2011      	movs	r0, #17
 8000bda:	f000 f80b 	bl	8000bf4 <LCD_Write_Cmd>
	delay_50ms();
 8000bde:	f7ff fe65 	bl	80008ac <delay_50ms>
	delay_50ms();
 8000be2:	f7ff fe63 	bl	80008ac <delay_50ms>
	LCD_Write_Cmd(ILI9341_DISPLAY_ON); //display on
 8000be6:	2029      	movs	r0, #41	; 0x29
 8000be8:	f000 f804 	bl	8000bf4 <LCD_Write_Cmd>

}
 8000bec:	bf00      	nop
 8000bee:	3710      	adds	r7, #16
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bd80      	pop	{r7, pc}

08000bf4 <LCD_Write_Cmd>:
void LCD_Write_Cmd(uint8_t cmd)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	b085      	sub	sp, #20
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	71fb      	strb	r3, [r7, #7]
	SPI_TypeDef *pSPI = SPI;
 8000bfe:	4b1c      	ldr	r3, [pc, #112]	; (8000c70 <LCD_Write_Cmd+0x7c>)
 8000c00:	60fb      	str	r3, [r7, #12]
	LCD_CSX_LOW();
 8000c02:	4b1c      	ldr	r3, [pc, #112]	; (8000c74 <LCD_Write_Cmd+0x80>)
 8000c04:	695b      	ldr	r3, [r3, #20]
 8000c06:	4a1b      	ldr	r2, [pc, #108]	; (8000c74 <LCD_Write_Cmd+0x80>)
 8000c08:	f023 0304 	bic.w	r3, r3, #4
 8000c0c:	6153      	str	r3, [r2, #20]
	LCD_DCX_LOW(); //DCX = 0 , for command
 8000c0e:	4b1a      	ldr	r3, [pc, #104]	; (8000c78 <LCD_Write_Cmd+0x84>)
 8000c10:	695b      	ldr	r3, [r3, #20]
 8000c12:	4a19      	ldr	r2, [pc, #100]	; (8000c78 <LCD_Write_Cmd+0x84>)
 8000c14:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000c18:	6153      	str	r3, [r2, #20]
	while(!REG_READ_BIT(pSPI->SR,SPI_SR_TXE_Pos));
 8000c1a:	bf00      	nop
 8000c1c:	68fb      	ldr	r3, [r7, #12]
 8000c1e:	689b      	ldr	r3, [r3, #8]
 8000c20:	f003 0302 	and.w	r3, r3, #2
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d0f9      	beq.n	8000c1c <LCD_Write_Cmd+0x28>
	REG_WRITE(pSPI->DR,cmd);
 8000c28:	79fa      	ldrb	r2, [r7, #7]
 8000c2a:	68fb      	ldr	r3, [r7, #12]
 8000c2c:	60da      	str	r2, [r3, #12]
	while(!REG_READ_BIT(pSPI->SR,SPI_SR_TXE_Pos));
 8000c2e:	bf00      	nop
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	689b      	ldr	r3, [r3, #8]
 8000c34:	f003 0302 	and.w	r3, r3, #2
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d0f9      	beq.n	8000c30 <LCD_Write_Cmd+0x3c>
	while(REG_READ_BIT(pSPI->SR,SPI_SR_BSY_Pos));
 8000c3c:	bf00      	nop
 8000c3e:	68fb      	ldr	r3, [r7, #12]
 8000c40:	689b      	ldr	r3, [r3, #8]
 8000c42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d1f9      	bne.n	8000c3e <LCD_Write_Cmd+0x4a>
	LCD_DCX_HIGH();
 8000c4a:	4b0b      	ldr	r3, [pc, #44]	; (8000c78 <LCD_Write_Cmd+0x84>)
 8000c4c:	695b      	ldr	r3, [r3, #20]
 8000c4e:	4a0a      	ldr	r2, [pc, #40]	; (8000c78 <LCD_Write_Cmd+0x84>)
 8000c50:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000c54:	6153      	str	r3, [r2, #20]
	LCD_CSX_HIGH();
 8000c56:	4b07      	ldr	r3, [pc, #28]	; (8000c74 <LCD_Write_Cmd+0x80>)
 8000c58:	695b      	ldr	r3, [r3, #20]
 8000c5a:	4a06      	ldr	r2, [pc, #24]	; (8000c74 <LCD_Write_Cmd+0x80>)
 8000c5c:	f043 0304 	orr.w	r3, r3, #4
 8000c60:	6153      	str	r3, [r2, #20]

}
 8000c62:	bf00      	nop
 8000c64:	3714      	adds	r7, #20
 8000c66:	46bd      	mov	sp, r7
 8000c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6c:	4770      	bx	lr
 8000c6e:	bf00      	nop
 8000c70:	40015000 	.word	0x40015000
 8000c74:	40020800 	.word	0x40020800
 8000c78:	40020c00 	.word	0x40020c00

08000c7c <LCD_Write_Data>:

void LCD_Write_Data(uint8_t *buffer,uint32_t len)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	b085      	sub	sp, #20
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
 8000c84:	6039      	str	r1, [r7, #0]
	SPI_TypeDef *pSPI = SPI;
 8000c86:	4b1d      	ldr	r3, [pc, #116]	; (8000cfc <LCD_Write_Data+0x80>)
 8000c88:	60bb      	str	r3, [r7, #8]
	for(uint32_t i = 0 ; i < len ;i++){
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	60fb      	str	r3, [r7, #12]
 8000c8e:	e02a      	b.n	8000ce6 <LCD_Write_Data+0x6a>
		LCD_CSX_LOW();
 8000c90:	4b1b      	ldr	r3, [pc, #108]	; (8000d00 <LCD_Write_Data+0x84>)
 8000c92:	695b      	ldr	r3, [r3, #20]
 8000c94:	4a1a      	ldr	r2, [pc, #104]	; (8000d00 <LCD_Write_Data+0x84>)
 8000c96:	f023 0304 	bic.w	r3, r3, #4
 8000c9a:	6153      	str	r3, [r2, #20]
		while(!REG_READ_BIT(pSPI->SR,SPI_SR_TXE_Pos));
 8000c9c:	bf00      	nop
 8000c9e:	68bb      	ldr	r3, [r7, #8]
 8000ca0:	689b      	ldr	r3, [r3, #8]
 8000ca2:	f003 0302 	and.w	r3, r3, #2
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d0f9      	beq.n	8000c9e <LCD_Write_Data+0x22>
		REG_WRITE(pSPI->DR,buffer[i]);
 8000caa:	687a      	ldr	r2, [r7, #4]
 8000cac:	68fb      	ldr	r3, [r7, #12]
 8000cae:	4413      	add	r3, r2
 8000cb0:	781b      	ldrb	r3, [r3, #0]
 8000cb2:	461a      	mov	r2, r3
 8000cb4:	68bb      	ldr	r3, [r7, #8]
 8000cb6:	60da      	str	r2, [r3, #12]
		while(!REG_READ_BIT(pSPI->SR,SPI_SR_TXE_Pos));
 8000cb8:	bf00      	nop
 8000cba:	68bb      	ldr	r3, [r7, #8]
 8000cbc:	689b      	ldr	r3, [r3, #8]
 8000cbe:	f003 0302 	and.w	r3, r3, #2
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d0f9      	beq.n	8000cba <LCD_Write_Data+0x3e>
		while(REG_READ_BIT(pSPI->SR,SPI_SR_BSY_Pos));
 8000cc6:	bf00      	nop
 8000cc8:	68bb      	ldr	r3, [r7, #8]
 8000cca:	689b      	ldr	r3, [r3, #8]
 8000ccc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d1f9      	bne.n	8000cc8 <LCD_Write_Data+0x4c>
		LCD_CSX_HIGH();
 8000cd4:	4b0a      	ldr	r3, [pc, #40]	; (8000d00 <LCD_Write_Data+0x84>)
 8000cd6:	695b      	ldr	r3, [r3, #20]
 8000cd8:	4a09      	ldr	r2, [pc, #36]	; (8000d00 <LCD_Write_Data+0x84>)
 8000cda:	f043 0304 	orr.w	r3, r3, #4
 8000cde:	6153      	str	r3, [r2, #20]
	for(uint32_t i = 0 ; i < len ;i++){
 8000ce0:	68fb      	ldr	r3, [r7, #12]
 8000ce2:	3301      	adds	r3, #1
 8000ce4:	60fb      	str	r3, [r7, #12]
 8000ce6:	68fa      	ldr	r2, [r7, #12]
 8000ce8:	683b      	ldr	r3, [r7, #0]
 8000cea:	429a      	cmp	r2, r3
 8000cec:	d3d0      	bcc.n	8000c90 <LCD_Write_Data+0x14>
	}
}
 8000cee:	bf00      	nop
 8000cf0:	bf00      	nop
 8000cf2:	3714      	adds	r7, #20
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfa:	4770      	bx	lr
 8000cfc:	40015000 	.word	0x40015000
 8000d00:	40020800 	.word	0x40020800

08000d04 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d08:	f000 fb00 	bl	800130c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d0c:	f000 f82e 	bl	8000d6c <SystemClock_Config>


  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_LTDC_Init();
 8000d10:	f000 f89c 	bl	8000e4c <MX_LTDC_Init>
  /* USER CODE BEGIN 2 */
  BSP_LCD_Init();
 8000d14:	f7ff fbec 	bl	80004f0 <BSP_LCD_Init>
  BSP_LCD_Set_Orientation(LANDSCAPE);
 8000d18:	2001      	movs	r0, #1
 8000d1a:	f7ff fbf7 	bl	800050c <BSP_LCD_Set_Orientation>

    /* USER CODE BEGIN 3 */

	/*Configure the frame buffer address into Layer-1 fb address register */
	/* 3 frames/sec */
	HAL_LTDC_SetAddress(&hltdc, (uint32_t)t1_320x240_map, LTDC_LAYER_1);
 8000d1e:	4b0f      	ldr	r3, [pc, #60]	; (8000d5c <main+0x58>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	4619      	mov	r1, r3
 8000d24:	480e      	ldr	r0, [pc, #56]	; (8000d60 <main+0x5c>)
 8000d26:	f001 f815 	bl	8001d54 <HAL_LTDC_SetAddress>
	HAL_Delay(333);
 8000d2a:	f240 104d 	movw	r0, #333	; 0x14d
 8000d2e:	f000 fb5f 	bl	80013f0 <HAL_Delay>
	HAL_LTDC_SetAddress(&hltdc, (uint32_t)t2_320x240_map, LTDC_LAYER_1);
 8000d32:	4b0c      	ldr	r3, [pc, #48]	; (8000d64 <main+0x60>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	4619      	mov	r1, r3
 8000d38:	4809      	ldr	r0, [pc, #36]	; (8000d60 <main+0x5c>)
 8000d3a:	f001 f80b 	bl	8001d54 <HAL_LTDC_SetAddress>
	HAL_Delay(333);
 8000d3e:	f240 104d 	movw	r0, #333	; 0x14d
 8000d42:	f000 fb55 	bl	80013f0 <HAL_Delay>
	HAL_LTDC_SetAddress(&hltdc, (uint32_t)t3_320x240_map, LTDC_LAYER_1);
 8000d46:	4b08      	ldr	r3, [pc, #32]	; (8000d68 <main+0x64>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	4619      	mov	r1, r3
 8000d4c:	4804      	ldr	r0, [pc, #16]	; (8000d60 <main+0x5c>)
 8000d4e:	f001 f801 	bl	8001d54 <HAL_LTDC_SetAddress>
	HAL_Delay(333);
 8000d52:	f240 104d 	movw	r0, #333	; 0x14d
 8000d56:	f000 fb4b 	bl	80013f0 <HAL_Delay>
	HAL_LTDC_SetAddress(&hltdc, (uint32_t)t1_320x240_map, LTDC_LAYER_1);
 8000d5a:	e7e0      	b.n	8000d1e <main+0x1a>
 8000d5c:	08002e58 	.word	0x08002e58
 8000d60:	20000028 	.word	0x20000028
 8000d64:	08028658 	.word	0x08028658
 8000d68:	0804de58 	.word	0x0804de58

08000d6c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b094      	sub	sp, #80	; 0x50
 8000d70:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d72:	f107 0320 	add.w	r3, r7, #32
 8000d76:	2230      	movs	r2, #48	; 0x30
 8000d78:	2100      	movs	r1, #0
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	f002 f850 	bl	8002e20 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d80:	f107 030c 	add.w	r3, r7, #12
 8000d84:	2200      	movs	r2, #0
 8000d86:	601a      	str	r2, [r3, #0]
 8000d88:	605a      	str	r2, [r3, #4]
 8000d8a:	609a      	str	r2, [r3, #8]
 8000d8c:	60da      	str	r2, [r3, #12]
 8000d8e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d90:	2300      	movs	r3, #0
 8000d92:	60bb      	str	r3, [r7, #8]
 8000d94:	4b2b      	ldr	r3, [pc, #172]	; (8000e44 <SystemClock_Config+0xd8>)
 8000d96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d98:	4a2a      	ldr	r2, [pc, #168]	; (8000e44 <SystemClock_Config+0xd8>)
 8000d9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d9e:	6413      	str	r3, [r2, #64]	; 0x40
 8000da0:	4b28      	ldr	r3, [pc, #160]	; (8000e44 <SystemClock_Config+0xd8>)
 8000da2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000da4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000da8:	60bb      	str	r3, [r7, #8]
 8000daa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000dac:	2300      	movs	r3, #0
 8000dae:	607b      	str	r3, [r7, #4]
 8000db0:	4b25      	ldr	r3, [pc, #148]	; (8000e48 <SystemClock_Config+0xdc>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	4a24      	ldr	r2, [pc, #144]	; (8000e48 <SystemClock_Config+0xdc>)
 8000db6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000dba:	6013      	str	r3, [r2, #0]
 8000dbc:	4b22      	ldr	r3, [pc, #136]	; (8000e48 <SystemClock_Config+0xdc>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000dc4:	607b      	str	r3, [r7, #4]
 8000dc6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000dc8:	2302      	movs	r3, #2
 8000dca:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000dcc:	2301      	movs	r3, #1
 8000dce:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000dd0:	2310      	movs	r3, #16
 8000dd2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000dd4:	2302      	movs	r3, #2
 8000dd6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000ddc:	2308      	movs	r3, #8
 8000dde:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000de0:	23b4      	movs	r3, #180	; 0xb4
 8000de2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000de4:	2302      	movs	r3, #2
 8000de6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000de8:	2307      	movs	r3, #7
 8000dea:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dec:	f107 0320 	add.w	r3, r7, #32
 8000df0:	4618      	mov	r0, r3
 8000df2:	f001 f9cd 	bl	8002190 <HAL_RCC_OscConfig>
 8000df6:	4603      	mov	r3, r0
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d001      	beq.n	8000e00 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000dfc:	f000 f8a6 	bl	8000f4c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000e00:	f001 f976 	bl	80020f0 <HAL_PWREx_EnableOverDrive>
 8000e04:	4603      	mov	r3, r0
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d001      	beq.n	8000e0e <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000e0a:	f000 f89f 	bl	8000f4c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e0e:	230f      	movs	r3, #15
 8000e10:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e12:	2302      	movs	r3, #2
 8000e14:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e16:	2300      	movs	r3, #0
 8000e18:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000e1a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000e1e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000e20:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e24:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000e26:	f107 030c 	add.w	r3, r7, #12
 8000e2a:	2105      	movs	r1, #5
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	f001 fc27 	bl	8002680 <HAL_RCC_ClockConfig>
 8000e32:	4603      	mov	r3, r0
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d001      	beq.n	8000e3c <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000e38:	f000 f888 	bl	8000f4c <Error_Handler>
  }
}
 8000e3c:	bf00      	nop
 8000e3e:	3750      	adds	r7, #80	; 0x50
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd80      	pop	{r7, pc}
 8000e44:	40023800 	.word	0x40023800
 8000e48:	40007000 	.word	0x40007000

08000e4c <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b08e      	sub	sp, #56	; 0x38
 8000e50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000e52:	1d3b      	adds	r3, r7, #4
 8000e54:	2234      	movs	r2, #52	; 0x34
 8000e56:	2100      	movs	r1, #0
 8000e58:	4618      	mov	r0, r3
 8000e5a:	f001 ffe1 	bl	8002e20 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000e5e:	4b39      	ldr	r3, [pc, #228]	; (8000f44 <MX_LTDC_Init+0xf8>)
 8000e60:	4a39      	ldr	r2, [pc, #228]	; (8000f48 <MX_LTDC_Init+0xfc>)
 8000e62:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000e64:	4b37      	ldr	r3, [pc, #220]	; (8000f44 <MX_LTDC_Init+0xf8>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000e6a:	4b36      	ldr	r3, [pc, #216]	; (8000f44 <MX_LTDC_Init+0xf8>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000e70:	4b34      	ldr	r3, [pc, #208]	; (8000f44 <MX_LTDC_Init+0xf8>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000e76:	4b33      	ldr	r3, [pc, #204]	; (8000f44 <MX_LTDC_Init+0xf8>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 9;
 8000e7c:	4b31      	ldr	r3, [pc, #196]	; (8000f44 <MX_LTDC_Init+0xf8>)
 8000e7e:	2209      	movs	r2, #9
 8000e80:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 1;
 8000e82:	4b30      	ldr	r3, [pc, #192]	; (8000f44 <MX_LTDC_Init+0xf8>)
 8000e84:	2201      	movs	r2, #1
 8000e86:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 29;
 8000e88:	4b2e      	ldr	r3, [pc, #184]	; (8000f44 <MX_LTDC_Init+0xf8>)
 8000e8a:	221d      	movs	r2, #29
 8000e8c:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 3;
 8000e8e:	4b2d      	ldr	r3, [pc, #180]	; (8000f44 <MX_LTDC_Init+0xf8>)
 8000e90:	2203      	movs	r2, #3
 8000e92:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 349;
 8000e94:	4b2b      	ldr	r3, [pc, #172]	; (8000f44 <MX_LTDC_Init+0xf8>)
 8000e96:	f240 125d 	movw	r2, #349	; 0x15d
 8000e9a:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 323;
 8000e9c:	4b29      	ldr	r3, [pc, #164]	; (8000f44 <MX_LTDC_Init+0xf8>)
 8000e9e:	f240 1243 	movw	r2, #323	; 0x143
 8000ea2:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 359;
 8000ea4:	4b27      	ldr	r3, [pc, #156]	; (8000f44 <MX_LTDC_Init+0xf8>)
 8000ea6:	f240 1267 	movw	r2, #359	; 0x167
 8000eaa:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 327;
 8000eac:	4b25      	ldr	r3, [pc, #148]	; (8000f44 <MX_LTDC_Init+0xf8>)
 8000eae:	f240 1247 	movw	r2, #327	; 0x147
 8000eb2:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000eb4:	4b23      	ldr	r3, [pc, #140]	; (8000f44 <MX_LTDC_Init+0xf8>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000ebc:	4b21      	ldr	r3, [pc, #132]	; (8000f44 <MX_LTDC_Init+0xf8>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000ec4:	4b1f      	ldr	r3, [pc, #124]	; (8000f44 <MX_LTDC_Init+0xf8>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000ecc:	481d      	ldr	r0, [pc, #116]	; (8000f44 <MX_LTDC_Init+0xf8>)
 8000ece:	f000 fd71 	bl	80019b4 <HAL_LTDC_Init>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d001      	beq.n	8000edc <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8000ed8:	f000 f838 	bl	8000f4c <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000edc:	2300      	movs	r3, #0
 8000ede:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 320;
 8000ee0:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000ee4:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 240;
 8000eea:	23f0      	movs	r3, #240	; 0xf0
 8000eec:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8000eee:	2302      	movs	r3, #2
 8000ef0:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8000ef2:	23ff      	movs	r3, #255	; 0xff
 8000ef4:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000efa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000efe:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000f00:	2305      	movs	r3, #5
 8000f02:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0;
 8000f04:	2300      	movs	r3, #0
 8000f06:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 320;
 8000f08:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000f0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 240;
 8000f0e:	23f0      	movs	r3, #240	; 0xf0
 8000f10:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8000f12:	2300      	movs	r3, #0
 8000f14:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000f24:	1d3b      	adds	r3, r7, #4
 8000f26:	2200      	movs	r2, #0
 8000f28:	4619      	mov	r1, r3
 8000f2a:	4806      	ldr	r0, [pc, #24]	; (8000f44 <MX_LTDC_Init+0xf8>)
 8000f2c:	f000 fed4 	bl	8001cd8 <HAL_LTDC_ConfigLayer>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d001      	beq.n	8000f3a <MX_LTDC_Init+0xee>
  {
    Error_Handler();
 8000f36:	f000 f809 	bl	8000f4c <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8000f3a:	bf00      	nop
 8000f3c:	3738      	adds	r7, #56	; 0x38
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	20000028 	.word	0x20000028
 8000f48:	40016800 	.word	0x40016800

08000f4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f50:	b672      	cpsid	i
}
 8000f52:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f54:	e7fe      	b.n	8000f54 <Error_Handler+0x8>
	...

08000f58 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b082      	sub	sp, #8
 8000f5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f5e:	2300      	movs	r3, #0
 8000f60:	607b      	str	r3, [r7, #4]
 8000f62:	4b10      	ldr	r3, [pc, #64]	; (8000fa4 <HAL_MspInit+0x4c>)
 8000f64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f66:	4a0f      	ldr	r2, [pc, #60]	; (8000fa4 <HAL_MspInit+0x4c>)
 8000f68:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f6c:	6453      	str	r3, [r2, #68]	; 0x44
 8000f6e:	4b0d      	ldr	r3, [pc, #52]	; (8000fa4 <HAL_MspInit+0x4c>)
 8000f70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f76:	607b      	str	r3, [r7, #4]
 8000f78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	603b      	str	r3, [r7, #0]
 8000f7e:	4b09      	ldr	r3, [pc, #36]	; (8000fa4 <HAL_MspInit+0x4c>)
 8000f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f82:	4a08      	ldr	r2, [pc, #32]	; (8000fa4 <HAL_MspInit+0x4c>)
 8000f84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f88:	6413      	str	r3, [r2, #64]	; 0x40
 8000f8a:	4b06      	ldr	r3, [pc, #24]	; (8000fa4 <HAL_MspInit+0x4c>)
 8000f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f92:	603b      	str	r3, [r7, #0]
 8000f94:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000f96:	2007      	movs	r0, #7
 8000f98:	f000 fb1e 	bl	80015d8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f9c:	bf00      	nop
 8000f9e:	3708      	adds	r7, #8
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd80      	pop	{r7, pc}
 8000fa4:	40023800 	.word	0x40023800

08000fa8 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b09a      	sub	sp, #104	; 0x68
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fb0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	601a      	str	r2, [r3, #0]
 8000fb8:	605a      	str	r2, [r3, #4]
 8000fba:	609a      	str	r2, [r3, #8]
 8000fbc:	60da      	str	r2, [r3, #12]
 8000fbe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000fc0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fc4:	2230      	movs	r2, #48	; 0x30
 8000fc6:	2100      	movs	r1, #0
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f001 ff29 	bl	8002e20 <memset>
  if(hltdc->Instance==LTDC)
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	4a89      	ldr	r2, [pc, #548]	; (80011f8 <HAL_LTDC_MspInit+0x250>)
 8000fd4:	4293      	cmp	r3, r2
 8000fd6:	f040 810b 	bne.w	80011f0 <HAL_LTDC_MspInit+0x248>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8000fda:	2308      	movs	r3, #8
 8000fdc:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 8000fde:	2332      	movs	r3, #50	; 0x32
 8000fe0:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8000fe2:	2302      	movs	r3, #2
 8000fe4:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8000fe6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000fea:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000fec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f001 fd31 	bl	8002a58 <HAL_RCCEx_PeriphCLKConfig>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d001      	beq.n	8001000 <HAL_LTDC_MspInit+0x58>
    {
      Error_Handler();
 8000ffc:	f7ff ffa6 	bl	8000f4c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001000:	2300      	movs	r3, #0
 8001002:	623b      	str	r3, [r7, #32]
 8001004:	4b7d      	ldr	r3, [pc, #500]	; (80011fc <HAL_LTDC_MspInit+0x254>)
 8001006:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001008:	4a7c      	ldr	r2, [pc, #496]	; (80011fc <HAL_LTDC_MspInit+0x254>)
 800100a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800100e:	6453      	str	r3, [r2, #68]	; 0x44
 8001010:	4b7a      	ldr	r3, [pc, #488]	; (80011fc <HAL_LTDC_MspInit+0x254>)
 8001012:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001014:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001018:	623b      	str	r3, [r7, #32]
 800101a:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800101c:	2300      	movs	r3, #0
 800101e:	61fb      	str	r3, [r7, #28]
 8001020:	4b76      	ldr	r3, [pc, #472]	; (80011fc <HAL_LTDC_MspInit+0x254>)
 8001022:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001024:	4a75      	ldr	r2, [pc, #468]	; (80011fc <HAL_LTDC_MspInit+0x254>)
 8001026:	f043 0320 	orr.w	r3, r3, #32
 800102a:	6313      	str	r3, [r2, #48]	; 0x30
 800102c:	4b73      	ldr	r3, [pc, #460]	; (80011fc <HAL_LTDC_MspInit+0x254>)
 800102e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001030:	f003 0320 	and.w	r3, r3, #32
 8001034:	61fb      	str	r3, [r7, #28]
 8001036:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001038:	2300      	movs	r3, #0
 800103a:	61bb      	str	r3, [r7, #24]
 800103c:	4b6f      	ldr	r3, [pc, #444]	; (80011fc <HAL_LTDC_MspInit+0x254>)
 800103e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001040:	4a6e      	ldr	r2, [pc, #440]	; (80011fc <HAL_LTDC_MspInit+0x254>)
 8001042:	f043 0301 	orr.w	r3, r3, #1
 8001046:	6313      	str	r3, [r2, #48]	; 0x30
 8001048:	4b6c      	ldr	r3, [pc, #432]	; (80011fc <HAL_LTDC_MspInit+0x254>)
 800104a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800104c:	f003 0301 	and.w	r3, r3, #1
 8001050:	61bb      	str	r3, [r7, #24]
 8001052:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001054:	2300      	movs	r3, #0
 8001056:	617b      	str	r3, [r7, #20]
 8001058:	4b68      	ldr	r3, [pc, #416]	; (80011fc <HAL_LTDC_MspInit+0x254>)
 800105a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800105c:	4a67      	ldr	r2, [pc, #412]	; (80011fc <HAL_LTDC_MspInit+0x254>)
 800105e:	f043 0302 	orr.w	r3, r3, #2
 8001062:	6313      	str	r3, [r2, #48]	; 0x30
 8001064:	4b65      	ldr	r3, [pc, #404]	; (80011fc <HAL_LTDC_MspInit+0x254>)
 8001066:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001068:	f003 0302 	and.w	r3, r3, #2
 800106c:	617b      	str	r3, [r7, #20]
 800106e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001070:	2300      	movs	r3, #0
 8001072:	613b      	str	r3, [r7, #16]
 8001074:	4b61      	ldr	r3, [pc, #388]	; (80011fc <HAL_LTDC_MspInit+0x254>)
 8001076:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001078:	4a60      	ldr	r2, [pc, #384]	; (80011fc <HAL_LTDC_MspInit+0x254>)
 800107a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800107e:	6313      	str	r3, [r2, #48]	; 0x30
 8001080:	4b5e      	ldr	r3, [pc, #376]	; (80011fc <HAL_LTDC_MspInit+0x254>)
 8001082:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001084:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001088:	613b      	str	r3, [r7, #16]
 800108a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800108c:	2300      	movs	r3, #0
 800108e:	60fb      	str	r3, [r7, #12]
 8001090:	4b5a      	ldr	r3, [pc, #360]	; (80011fc <HAL_LTDC_MspInit+0x254>)
 8001092:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001094:	4a59      	ldr	r2, [pc, #356]	; (80011fc <HAL_LTDC_MspInit+0x254>)
 8001096:	f043 0304 	orr.w	r3, r3, #4
 800109a:	6313      	str	r3, [r2, #48]	; 0x30
 800109c:	4b57      	ldr	r3, [pc, #348]	; (80011fc <HAL_LTDC_MspInit+0x254>)
 800109e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a0:	f003 0304 	and.w	r3, r3, #4
 80010a4:	60fb      	str	r3, [r7, #12]
 80010a6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80010a8:	2300      	movs	r3, #0
 80010aa:	60bb      	str	r3, [r7, #8]
 80010ac:	4b53      	ldr	r3, [pc, #332]	; (80011fc <HAL_LTDC_MspInit+0x254>)
 80010ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b0:	4a52      	ldr	r2, [pc, #328]	; (80011fc <HAL_LTDC_MspInit+0x254>)
 80010b2:	f043 0308 	orr.w	r3, r3, #8
 80010b6:	6313      	str	r3, [r2, #48]	; 0x30
 80010b8:	4b50      	ldr	r3, [pc, #320]	; (80011fc <HAL_LTDC_MspInit+0x254>)
 80010ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010bc:	f003 0308 	and.w	r3, r3, #8
 80010c0:	60bb      	str	r3, [r7, #8]
 80010c2:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 80010c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80010c8:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ca:	2302      	movs	r3, #2
 80010cc:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ce:	2300      	movs	r3, #0
 80010d0:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010d2:	2300      	movs	r3, #0
 80010d4:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80010d6:	230e      	movs	r3, #14
 80010d8:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 80010da:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80010de:	4619      	mov	r1, r3
 80010e0:	4847      	ldr	r0, [pc, #284]	; (8001200 <HAL_LTDC_MspInit+0x258>)
 80010e2:	f000 fabb 	bl	800165c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 80010e6:	f641 0358 	movw	r3, #6232	; 0x1858
 80010ea:	657b      	str	r3, [r7, #84]	; 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ec:	2302      	movs	r3, #2
 80010ee:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f0:	2300      	movs	r3, #0
 80010f2:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010f4:	2300      	movs	r3, #0
 80010f6:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80010f8:	230e      	movs	r3, #14
 80010fa:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010fc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001100:	4619      	mov	r1, r3
 8001102:	4840      	ldr	r0, [pc, #256]	; (8001204 <HAL_LTDC_MspInit+0x25c>)
 8001104:	f000 faaa 	bl	800165c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8001108:	2303      	movs	r3, #3
 800110a:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800110c:	2302      	movs	r3, #2
 800110e:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001110:	2300      	movs	r3, #0
 8001112:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001114:	2300      	movs	r3, #0
 8001116:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001118:	2309      	movs	r3, #9
 800111a:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800111c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001120:	4619      	mov	r1, r3
 8001122:	4839      	ldr	r0, [pc, #228]	; (8001208 <HAL_LTDC_MspInit+0x260>)
 8001124:	f000 fa9a 	bl	800165c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8001128:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 800112c:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800112e:	2302      	movs	r3, #2
 8001130:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001132:	2300      	movs	r3, #0
 8001134:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001136:	2300      	movs	r3, #0
 8001138:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800113a:	230e      	movs	r3, #14
 800113c:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800113e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001142:	4619      	mov	r1, r3
 8001144:	4830      	ldr	r0, [pc, #192]	; (8001208 <HAL_LTDC_MspInit+0x260>)
 8001146:	f000 fa89 	bl	800165c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 800114a:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 800114e:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001150:	2302      	movs	r3, #2
 8001152:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001154:	2300      	movs	r3, #0
 8001156:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001158:	2300      	movs	r3, #0
 800115a:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800115c:	230e      	movs	r3, #14
 800115e:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001160:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001164:	4619      	mov	r1, r3
 8001166:	4829      	ldr	r0, [pc, #164]	; (800120c <HAL_LTDC_MspInit+0x264>)
 8001168:	f000 fa78 	bl	800165c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 800116c:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8001170:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001172:	2302      	movs	r3, #2
 8001174:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001176:	2300      	movs	r3, #0
 8001178:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800117a:	2300      	movs	r3, #0
 800117c:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800117e:	230e      	movs	r3, #14
 8001180:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001182:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001186:	4619      	mov	r1, r3
 8001188:	4821      	ldr	r0, [pc, #132]	; (8001210 <HAL_LTDC_MspInit+0x268>)
 800118a:	f000 fa67 	bl	800165c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 800118e:	2348      	movs	r3, #72	; 0x48
 8001190:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001192:	2302      	movs	r3, #2
 8001194:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001196:	2300      	movs	r3, #0
 8001198:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800119a:	2300      	movs	r3, #0
 800119c:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800119e:	230e      	movs	r3, #14
 80011a0:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011a2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80011a6:	4619      	mov	r1, r3
 80011a8:	481a      	ldr	r0, [pc, #104]	; (8001214 <HAL_LTDC_MspInit+0x26c>)
 80011aa:	f000 fa57 	bl	800165c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 80011ae:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80011b2:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011b4:	2302      	movs	r3, #2
 80011b6:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b8:	2300      	movs	r3, #0
 80011ba:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011bc:	2300      	movs	r3, #0
 80011be:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80011c0:	2309      	movs	r3, #9
 80011c2:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80011c4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80011c8:	4619      	mov	r1, r3
 80011ca:	4810      	ldr	r0, [pc, #64]	; (800120c <HAL_LTDC_MspInit+0x264>)
 80011cc:	f000 fa46 	bl	800165c <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 0, 0);
 80011d0:	2200      	movs	r2, #0
 80011d2:	2100      	movs	r1, #0
 80011d4:	2058      	movs	r0, #88	; 0x58
 80011d6:	f000 fa0a 	bl	80015ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 80011da:	2058      	movs	r0, #88	; 0x58
 80011dc:	f000 fa23 	bl	8001626 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(LTDC_ER_IRQn, 0, 0);
 80011e0:	2200      	movs	r2, #0
 80011e2:	2100      	movs	r1, #0
 80011e4:	2059      	movs	r0, #89	; 0x59
 80011e6:	f000 fa02 	bl	80015ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_ER_IRQn);
 80011ea:	2059      	movs	r0, #89	; 0x59
 80011ec:	f000 fa1b 	bl	8001626 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 80011f0:	bf00      	nop
 80011f2:	3768      	adds	r7, #104	; 0x68
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	40016800 	.word	0x40016800
 80011fc:	40023800 	.word	0x40023800
 8001200:	40021400 	.word	0x40021400
 8001204:	40020000 	.word	0x40020000
 8001208:	40020400 	.word	0x40020400
 800120c:	40021800 	.word	0x40021800
 8001210:	40020800 	.word	0x40020800
 8001214:	40020c00 	.word	0x40020c00

08001218 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001218:	b480      	push	{r7}
 800121a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800121c:	e7fe      	b.n	800121c <NMI_Handler+0x4>

0800121e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800121e:	b480      	push	{r7}
 8001220:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001222:	e7fe      	b.n	8001222 <HardFault_Handler+0x4>

08001224 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001224:	b480      	push	{r7}
 8001226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001228:	e7fe      	b.n	8001228 <MemManage_Handler+0x4>

0800122a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800122a:	b480      	push	{r7}
 800122c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800122e:	e7fe      	b.n	800122e <BusFault_Handler+0x4>

08001230 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001230:	b480      	push	{r7}
 8001232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001234:	e7fe      	b.n	8001234 <UsageFault_Handler+0x4>

08001236 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001236:	b480      	push	{r7}
 8001238:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800123a:	bf00      	nop
 800123c:	46bd      	mov	sp, r7
 800123e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001242:	4770      	bx	lr

08001244 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001244:	b480      	push	{r7}
 8001246:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001248:	bf00      	nop
 800124a:	46bd      	mov	sp, r7
 800124c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001250:	4770      	bx	lr

08001252 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001252:	b480      	push	{r7}
 8001254:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001256:	bf00      	nop
 8001258:	46bd      	mov	sp, r7
 800125a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125e:	4770      	bx	lr

08001260 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001264:	f000 f8a4 	bl	80013b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001268:	bf00      	nop
 800126a:	bd80      	pop	{r7, pc}

0800126c <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8001270:	4802      	ldr	r0, [pc, #8]	; (800127c <LTDC_IRQHandler+0x10>)
 8001272:	f000 fc6f 	bl	8001b54 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8001276:	bf00      	nop
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	20000028 	.word	0x20000028

08001280 <LTDC_ER_IRQHandler>:

/**
  * @brief This function handles LTDC global error interrupt.
  */
void LTDC_ER_IRQHandler(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_ER_IRQn 0 */

  /* USER CODE END LTDC_ER_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8001284:	4802      	ldr	r0, [pc, #8]	; (8001290 <LTDC_ER_IRQHandler+0x10>)
 8001286:	f000 fc65 	bl	8001b54 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_ER_IRQn 1 */

  /* USER CODE END LTDC_ER_IRQn 1 */
}
 800128a:	bf00      	nop
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	20000028 	.word	0x20000028

08001294 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001294:	b480      	push	{r7}
 8001296:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001298:	4b06      	ldr	r3, [pc, #24]	; (80012b4 <SystemInit+0x20>)
 800129a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800129e:	4a05      	ldr	r2, [pc, #20]	; (80012b4 <SystemInit+0x20>)
 80012a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80012a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012a8:	bf00      	nop
 80012aa:	46bd      	mov	sp, r7
 80012ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b0:	4770      	bx	lr
 80012b2:	bf00      	nop
 80012b4:	e000ed00 	.word	0xe000ed00

080012b8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80012b8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80012f0 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80012bc:	480d      	ldr	r0, [pc, #52]	; (80012f4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80012be:	490e      	ldr	r1, [pc, #56]	; (80012f8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80012c0:	4a0e      	ldr	r2, [pc, #56]	; (80012fc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80012c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012c4:	e002      	b.n	80012cc <LoopCopyDataInit>

080012c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012ca:	3304      	adds	r3, #4

080012cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012d0:	d3f9      	bcc.n	80012c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012d2:	4a0b      	ldr	r2, [pc, #44]	; (8001300 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80012d4:	4c0b      	ldr	r4, [pc, #44]	; (8001304 <LoopFillZerobss+0x26>)
  movs r3, #0
 80012d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012d8:	e001      	b.n	80012de <LoopFillZerobss>

080012da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012dc:	3204      	adds	r2, #4

080012de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012e0:	d3fb      	bcc.n	80012da <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80012e2:	f7ff ffd7 	bl	8001294 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80012e6:	f001 fd77 	bl	8002dd8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80012ea:	f7ff fd0b 	bl	8000d04 <main>
  bx  lr    
 80012ee:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80012f0:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80012f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012f8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80012fc:	08073668 	.word	0x08073668
  ldr r2, =_sbss
 8001300:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001304:	200000d4 	.word	0x200000d4

08001308 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001308:	e7fe      	b.n	8001308 <ADC_IRQHandler>
	...

0800130c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001310:	4b0e      	ldr	r3, [pc, #56]	; (800134c <HAL_Init+0x40>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	4a0d      	ldr	r2, [pc, #52]	; (800134c <HAL_Init+0x40>)
 8001316:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800131a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800131c:	4b0b      	ldr	r3, [pc, #44]	; (800134c <HAL_Init+0x40>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	4a0a      	ldr	r2, [pc, #40]	; (800134c <HAL_Init+0x40>)
 8001322:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001326:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001328:	4b08      	ldr	r3, [pc, #32]	; (800134c <HAL_Init+0x40>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	4a07      	ldr	r2, [pc, #28]	; (800134c <HAL_Init+0x40>)
 800132e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001332:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001334:	2003      	movs	r0, #3
 8001336:	f000 f94f 	bl	80015d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800133a:	2000      	movs	r0, #0
 800133c:	f000 f808 	bl	8001350 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001340:	f7ff fe0a 	bl	8000f58 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001344:	2300      	movs	r3, #0
}
 8001346:	4618      	mov	r0, r3
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	40023c00 	.word	0x40023c00

08001350 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b082      	sub	sp, #8
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001358:	4b12      	ldr	r3, [pc, #72]	; (80013a4 <HAL_InitTick+0x54>)
 800135a:	681a      	ldr	r2, [r3, #0]
 800135c:	4b12      	ldr	r3, [pc, #72]	; (80013a8 <HAL_InitTick+0x58>)
 800135e:	781b      	ldrb	r3, [r3, #0]
 8001360:	4619      	mov	r1, r3
 8001362:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001366:	fbb3 f3f1 	udiv	r3, r3, r1
 800136a:	fbb2 f3f3 	udiv	r3, r2, r3
 800136e:	4618      	mov	r0, r3
 8001370:	f000 f967 	bl	8001642 <HAL_SYSTICK_Config>
 8001374:	4603      	mov	r3, r0
 8001376:	2b00      	cmp	r3, #0
 8001378:	d001      	beq.n	800137e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800137a:	2301      	movs	r3, #1
 800137c:	e00e      	b.n	800139c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	2b0f      	cmp	r3, #15
 8001382:	d80a      	bhi.n	800139a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001384:	2200      	movs	r2, #0
 8001386:	6879      	ldr	r1, [r7, #4]
 8001388:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800138c:	f000 f92f 	bl	80015ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001390:	4a06      	ldr	r2, [pc, #24]	; (80013ac <HAL_InitTick+0x5c>)
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001396:	2300      	movs	r3, #0
 8001398:	e000      	b.n	800139c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800139a:	2301      	movs	r3, #1
}
 800139c:	4618      	mov	r0, r3
 800139e:	3708      	adds	r7, #8
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}
 80013a4:	20000000 	.word	0x20000000
 80013a8:	20000008 	.word	0x20000008
 80013ac:	20000004 	.word	0x20000004

080013b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013b0:	b480      	push	{r7}
 80013b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013b4:	4b06      	ldr	r3, [pc, #24]	; (80013d0 <HAL_IncTick+0x20>)
 80013b6:	781b      	ldrb	r3, [r3, #0]
 80013b8:	461a      	mov	r2, r3
 80013ba:	4b06      	ldr	r3, [pc, #24]	; (80013d4 <HAL_IncTick+0x24>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	4413      	add	r3, r2
 80013c0:	4a04      	ldr	r2, [pc, #16]	; (80013d4 <HAL_IncTick+0x24>)
 80013c2:	6013      	str	r3, [r2, #0]
}
 80013c4:	bf00      	nop
 80013c6:	46bd      	mov	sp, r7
 80013c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013cc:	4770      	bx	lr
 80013ce:	bf00      	nop
 80013d0:	20000008 	.word	0x20000008
 80013d4:	200000d0 	.word	0x200000d0

080013d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013d8:	b480      	push	{r7}
 80013da:	af00      	add	r7, sp, #0
  return uwTick;
 80013dc:	4b03      	ldr	r3, [pc, #12]	; (80013ec <HAL_GetTick+0x14>)
 80013de:	681b      	ldr	r3, [r3, #0]
}
 80013e0:	4618      	mov	r0, r3
 80013e2:	46bd      	mov	sp, r7
 80013e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e8:	4770      	bx	lr
 80013ea:	bf00      	nop
 80013ec:	200000d0 	.word	0x200000d0

080013f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b084      	sub	sp, #16
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013f8:	f7ff ffee 	bl	80013d8 <HAL_GetTick>
 80013fc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001408:	d005      	beq.n	8001416 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800140a:	4b0a      	ldr	r3, [pc, #40]	; (8001434 <HAL_Delay+0x44>)
 800140c:	781b      	ldrb	r3, [r3, #0]
 800140e:	461a      	mov	r2, r3
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	4413      	add	r3, r2
 8001414:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001416:	bf00      	nop
 8001418:	f7ff ffde 	bl	80013d8 <HAL_GetTick>
 800141c:	4602      	mov	r2, r0
 800141e:	68bb      	ldr	r3, [r7, #8]
 8001420:	1ad3      	subs	r3, r2, r3
 8001422:	68fa      	ldr	r2, [r7, #12]
 8001424:	429a      	cmp	r2, r3
 8001426:	d8f7      	bhi.n	8001418 <HAL_Delay+0x28>
  {
  }
}
 8001428:	bf00      	nop
 800142a:	bf00      	nop
 800142c:	3710      	adds	r7, #16
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	20000008 	.word	0x20000008

08001438 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001438:	b480      	push	{r7}
 800143a:	b085      	sub	sp, #20
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	f003 0307 	and.w	r3, r3, #7
 8001446:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001448:	4b0c      	ldr	r3, [pc, #48]	; (800147c <__NVIC_SetPriorityGrouping+0x44>)
 800144a:	68db      	ldr	r3, [r3, #12]
 800144c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800144e:	68ba      	ldr	r2, [r7, #8]
 8001450:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001454:	4013      	ands	r3, r2
 8001456:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800145c:	68bb      	ldr	r3, [r7, #8]
 800145e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001460:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001464:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001468:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800146a:	4a04      	ldr	r2, [pc, #16]	; (800147c <__NVIC_SetPriorityGrouping+0x44>)
 800146c:	68bb      	ldr	r3, [r7, #8]
 800146e:	60d3      	str	r3, [r2, #12]
}
 8001470:	bf00      	nop
 8001472:	3714      	adds	r7, #20
 8001474:	46bd      	mov	sp, r7
 8001476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147a:	4770      	bx	lr
 800147c:	e000ed00 	.word	0xe000ed00

08001480 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001480:	b480      	push	{r7}
 8001482:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001484:	4b04      	ldr	r3, [pc, #16]	; (8001498 <__NVIC_GetPriorityGrouping+0x18>)
 8001486:	68db      	ldr	r3, [r3, #12]
 8001488:	0a1b      	lsrs	r3, r3, #8
 800148a:	f003 0307 	and.w	r3, r3, #7
}
 800148e:	4618      	mov	r0, r3
 8001490:	46bd      	mov	sp, r7
 8001492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001496:	4770      	bx	lr
 8001498:	e000ed00 	.word	0xe000ed00

0800149c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800149c:	b480      	push	{r7}
 800149e:	b083      	sub	sp, #12
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	4603      	mov	r3, r0
 80014a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	db0b      	blt.n	80014c6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014ae:	79fb      	ldrb	r3, [r7, #7]
 80014b0:	f003 021f 	and.w	r2, r3, #31
 80014b4:	4907      	ldr	r1, [pc, #28]	; (80014d4 <__NVIC_EnableIRQ+0x38>)
 80014b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ba:	095b      	lsrs	r3, r3, #5
 80014bc:	2001      	movs	r0, #1
 80014be:	fa00 f202 	lsl.w	r2, r0, r2
 80014c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80014c6:	bf00      	nop
 80014c8:	370c      	adds	r7, #12
 80014ca:	46bd      	mov	sp, r7
 80014cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d0:	4770      	bx	lr
 80014d2:	bf00      	nop
 80014d4:	e000e100 	.word	0xe000e100

080014d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014d8:	b480      	push	{r7}
 80014da:	b083      	sub	sp, #12
 80014dc:	af00      	add	r7, sp, #0
 80014de:	4603      	mov	r3, r0
 80014e0:	6039      	str	r1, [r7, #0]
 80014e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	db0a      	blt.n	8001502 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	b2da      	uxtb	r2, r3
 80014f0:	490c      	ldr	r1, [pc, #48]	; (8001524 <__NVIC_SetPriority+0x4c>)
 80014f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014f6:	0112      	lsls	r2, r2, #4
 80014f8:	b2d2      	uxtb	r2, r2
 80014fa:	440b      	add	r3, r1
 80014fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001500:	e00a      	b.n	8001518 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	b2da      	uxtb	r2, r3
 8001506:	4908      	ldr	r1, [pc, #32]	; (8001528 <__NVIC_SetPriority+0x50>)
 8001508:	79fb      	ldrb	r3, [r7, #7]
 800150a:	f003 030f 	and.w	r3, r3, #15
 800150e:	3b04      	subs	r3, #4
 8001510:	0112      	lsls	r2, r2, #4
 8001512:	b2d2      	uxtb	r2, r2
 8001514:	440b      	add	r3, r1
 8001516:	761a      	strb	r2, [r3, #24]
}
 8001518:	bf00      	nop
 800151a:	370c      	adds	r7, #12
 800151c:	46bd      	mov	sp, r7
 800151e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001522:	4770      	bx	lr
 8001524:	e000e100 	.word	0xe000e100
 8001528:	e000ed00 	.word	0xe000ed00

0800152c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800152c:	b480      	push	{r7}
 800152e:	b089      	sub	sp, #36	; 0x24
 8001530:	af00      	add	r7, sp, #0
 8001532:	60f8      	str	r0, [r7, #12]
 8001534:	60b9      	str	r1, [r7, #8]
 8001536:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	f003 0307 	and.w	r3, r3, #7
 800153e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001540:	69fb      	ldr	r3, [r7, #28]
 8001542:	f1c3 0307 	rsb	r3, r3, #7
 8001546:	2b04      	cmp	r3, #4
 8001548:	bf28      	it	cs
 800154a:	2304      	movcs	r3, #4
 800154c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800154e:	69fb      	ldr	r3, [r7, #28]
 8001550:	3304      	adds	r3, #4
 8001552:	2b06      	cmp	r3, #6
 8001554:	d902      	bls.n	800155c <NVIC_EncodePriority+0x30>
 8001556:	69fb      	ldr	r3, [r7, #28]
 8001558:	3b03      	subs	r3, #3
 800155a:	e000      	b.n	800155e <NVIC_EncodePriority+0x32>
 800155c:	2300      	movs	r3, #0
 800155e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001560:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001564:	69bb      	ldr	r3, [r7, #24]
 8001566:	fa02 f303 	lsl.w	r3, r2, r3
 800156a:	43da      	mvns	r2, r3
 800156c:	68bb      	ldr	r3, [r7, #8]
 800156e:	401a      	ands	r2, r3
 8001570:	697b      	ldr	r3, [r7, #20]
 8001572:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001574:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001578:	697b      	ldr	r3, [r7, #20]
 800157a:	fa01 f303 	lsl.w	r3, r1, r3
 800157e:	43d9      	mvns	r1, r3
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001584:	4313      	orrs	r3, r2
         );
}
 8001586:	4618      	mov	r0, r3
 8001588:	3724      	adds	r7, #36	; 0x24
 800158a:	46bd      	mov	sp, r7
 800158c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001590:	4770      	bx	lr
	...

08001594 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b082      	sub	sp, #8
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	3b01      	subs	r3, #1
 80015a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80015a4:	d301      	bcc.n	80015aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015a6:	2301      	movs	r3, #1
 80015a8:	e00f      	b.n	80015ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015aa:	4a0a      	ldr	r2, [pc, #40]	; (80015d4 <SysTick_Config+0x40>)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	3b01      	subs	r3, #1
 80015b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015b2:	210f      	movs	r1, #15
 80015b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80015b8:	f7ff ff8e 	bl	80014d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015bc:	4b05      	ldr	r3, [pc, #20]	; (80015d4 <SysTick_Config+0x40>)
 80015be:	2200      	movs	r2, #0
 80015c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015c2:	4b04      	ldr	r3, [pc, #16]	; (80015d4 <SysTick_Config+0x40>)
 80015c4:	2207      	movs	r2, #7
 80015c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015c8:	2300      	movs	r3, #0
}
 80015ca:	4618      	mov	r0, r3
 80015cc:	3708      	adds	r7, #8
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	e000e010 	.word	0xe000e010

080015d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b082      	sub	sp, #8
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015e0:	6878      	ldr	r0, [r7, #4]
 80015e2:	f7ff ff29 	bl	8001438 <__NVIC_SetPriorityGrouping>
}
 80015e6:	bf00      	nop
 80015e8:	3708      	adds	r7, #8
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}

080015ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80015ee:	b580      	push	{r7, lr}
 80015f0:	b086      	sub	sp, #24
 80015f2:	af00      	add	r7, sp, #0
 80015f4:	4603      	mov	r3, r0
 80015f6:	60b9      	str	r1, [r7, #8]
 80015f8:	607a      	str	r2, [r7, #4]
 80015fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80015fc:	2300      	movs	r3, #0
 80015fe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001600:	f7ff ff3e 	bl	8001480 <__NVIC_GetPriorityGrouping>
 8001604:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001606:	687a      	ldr	r2, [r7, #4]
 8001608:	68b9      	ldr	r1, [r7, #8]
 800160a:	6978      	ldr	r0, [r7, #20]
 800160c:	f7ff ff8e 	bl	800152c <NVIC_EncodePriority>
 8001610:	4602      	mov	r2, r0
 8001612:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001616:	4611      	mov	r1, r2
 8001618:	4618      	mov	r0, r3
 800161a:	f7ff ff5d 	bl	80014d8 <__NVIC_SetPriority>
}
 800161e:	bf00      	nop
 8001620:	3718      	adds	r7, #24
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}

08001626 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001626:	b580      	push	{r7, lr}
 8001628:	b082      	sub	sp, #8
 800162a:	af00      	add	r7, sp, #0
 800162c:	4603      	mov	r3, r0
 800162e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001630:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001634:	4618      	mov	r0, r3
 8001636:	f7ff ff31 	bl	800149c <__NVIC_EnableIRQ>
}
 800163a:	bf00      	nop
 800163c:	3708      	adds	r7, #8
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}

08001642 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001642:	b580      	push	{r7, lr}
 8001644:	b082      	sub	sp, #8
 8001646:	af00      	add	r7, sp, #0
 8001648:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800164a:	6878      	ldr	r0, [r7, #4]
 800164c:	f7ff ffa2 	bl	8001594 <SysTick_Config>
 8001650:	4603      	mov	r3, r0
}
 8001652:	4618      	mov	r0, r3
 8001654:	3708      	adds	r7, #8
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}
	...

0800165c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800165c:	b480      	push	{r7}
 800165e:	b089      	sub	sp, #36	; 0x24
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
 8001664:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001666:	2300      	movs	r3, #0
 8001668:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800166a:	2300      	movs	r3, #0
 800166c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800166e:	2300      	movs	r3, #0
 8001670:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001672:	2300      	movs	r3, #0
 8001674:	61fb      	str	r3, [r7, #28]
 8001676:	e177      	b.n	8001968 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001678:	2201      	movs	r2, #1
 800167a:	69fb      	ldr	r3, [r7, #28]
 800167c:	fa02 f303 	lsl.w	r3, r2, r3
 8001680:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	697a      	ldr	r2, [r7, #20]
 8001688:	4013      	ands	r3, r2
 800168a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800168c:	693a      	ldr	r2, [r7, #16]
 800168e:	697b      	ldr	r3, [r7, #20]
 8001690:	429a      	cmp	r2, r3
 8001692:	f040 8166 	bne.w	8001962 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	685b      	ldr	r3, [r3, #4]
 800169a:	f003 0303 	and.w	r3, r3, #3
 800169e:	2b01      	cmp	r3, #1
 80016a0:	d005      	beq.n	80016ae <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	685b      	ldr	r3, [r3, #4]
 80016a6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80016aa:	2b02      	cmp	r3, #2
 80016ac:	d130      	bne.n	8001710 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	689b      	ldr	r3, [r3, #8]
 80016b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80016b4:	69fb      	ldr	r3, [r7, #28]
 80016b6:	005b      	lsls	r3, r3, #1
 80016b8:	2203      	movs	r2, #3
 80016ba:	fa02 f303 	lsl.w	r3, r2, r3
 80016be:	43db      	mvns	r3, r3
 80016c0:	69ba      	ldr	r2, [r7, #24]
 80016c2:	4013      	ands	r3, r2
 80016c4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	68da      	ldr	r2, [r3, #12]
 80016ca:	69fb      	ldr	r3, [r7, #28]
 80016cc:	005b      	lsls	r3, r3, #1
 80016ce:	fa02 f303 	lsl.w	r3, r2, r3
 80016d2:	69ba      	ldr	r2, [r7, #24]
 80016d4:	4313      	orrs	r3, r2
 80016d6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	69ba      	ldr	r2, [r7, #24]
 80016dc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	685b      	ldr	r3, [r3, #4]
 80016e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80016e4:	2201      	movs	r2, #1
 80016e6:	69fb      	ldr	r3, [r7, #28]
 80016e8:	fa02 f303 	lsl.w	r3, r2, r3
 80016ec:	43db      	mvns	r3, r3
 80016ee:	69ba      	ldr	r2, [r7, #24]
 80016f0:	4013      	ands	r3, r2
 80016f2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	091b      	lsrs	r3, r3, #4
 80016fa:	f003 0201 	and.w	r2, r3, #1
 80016fe:	69fb      	ldr	r3, [r7, #28]
 8001700:	fa02 f303 	lsl.w	r3, r2, r3
 8001704:	69ba      	ldr	r2, [r7, #24]
 8001706:	4313      	orrs	r3, r2
 8001708:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	69ba      	ldr	r2, [r7, #24]
 800170e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	685b      	ldr	r3, [r3, #4]
 8001714:	f003 0303 	and.w	r3, r3, #3
 8001718:	2b03      	cmp	r3, #3
 800171a:	d017      	beq.n	800174c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	68db      	ldr	r3, [r3, #12]
 8001720:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001722:	69fb      	ldr	r3, [r7, #28]
 8001724:	005b      	lsls	r3, r3, #1
 8001726:	2203      	movs	r2, #3
 8001728:	fa02 f303 	lsl.w	r3, r2, r3
 800172c:	43db      	mvns	r3, r3
 800172e:	69ba      	ldr	r2, [r7, #24]
 8001730:	4013      	ands	r3, r2
 8001732:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	689a      	ldr	r2, [r3, #8]
 8001738:	69fb      	ldr	r3, [r7, #28]
 800173a:	005b      	lsls	r3, r3, #1
 800173c:	fa02 f303 	lsl.w	r3, r2, r3
 8001740:	69ba      	ldr	r2, [r7, #24]
 8001742:	4313      	orrs	r3, r2
 8001744:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	69ba      	ldr	r2, [r7, #24]
 800174a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	f003 0303 	and.w	r3, r3, #3
 8001754:	2b02      	cmp	r3, #2
 8001756:	d123      	bne.n	80017a0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001758:	69fb      	ldr	r3, [r7, #28]
 800175a:	08da      	lsrs	r2, r3, #3
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	3208      	adds	r2, #8
 8001760:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001764:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001766:	69fb      	ldr	r3, [r7, #28]
 8001768:	f003 0307 	and.w	r3, r3, #7
 800176c:	009b      	lsls	r3, r3, #2
 800176e:	220f      	movs	r2, #15
 8001770:	fa02 f303 	lsl.w	r3, r2, r3
 8001774:	43db      	mvns	r3, r3
 8001776:	69ba      	ldr	r2, [r7, #24]
 8001778:	4013      	ands	r3, r2
 800177a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	691a      	ldr	r2, [r3, #16]
 8001780:	69fb      	ldr	r3, [r7, #28]
 8001782:	f003 0307 	and.w	r3, r3, #7
 8001786:	009b      	lsls	r3, r3, #2
 8001788:	fa02 f303 	lsl.w	r3, r2, r3
 800178c:	69ba      	ldr	r2, [r7, #24]
 800178e:	4313      	orrs	r3, r2
 8001790:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001792:	69fb      	ldr	r3, [r7, #28]
 8001794:	08da      	lsrs	r2, r3, #3
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	3208      	adds	r2, #8
 800179a:	69b9      	ldr	r1, [r7, #24]
 800179c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80017a6:	69fb      	ldr	r3, [r7, #28]
 80017a8:	005b      	lsls	r3, r3, #1
 80017aa:	2203      	movs	r2, #3
 80017ac:	fa02 f303 	lsl.w	r3, r2, r3
 80017b0:	43db      	mvns	r3, r3
 80017b2:	69ba      	ldr	r2, [r7, #24]
 80017b4:	4013      	ands	r3, r2
 80017b6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	f003 0203 	and.w	r2, r3, #3
 80017c0:	69fb      	ldr	r3, [r7, #28]
 80017c2:	005b      	lsls	r3, r3, #1
 80017c4:	fa02 f303 	lsl.w	r3, r2, r3
 80017c8:	69ba      	ldr	r2, [r7, #24]
 80017ca:	4313      	orrs	r3, r2
 80017cc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	69ba      	ldr	r2, [r7, #24]
 80017d2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	685b      	ldr	r3, [r3, #4]
 80017d8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80017dc:	2b00      	cmp	r3, #0
 80017de:	f000 80c0 	beq.w	8001962 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017e2:	2300      	movs	r3, #0
 80017e4:	60fb      	str	r3, [r7, #12]
 80017e6:	4b66      	ldr	r3, [pc, #408]	; (8001980 <HAL_GPIO_Init+0x324>)
 80017e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017ea:	4a65      	ldr	r2, [pc, #404]	; (8001980 <HAL_GPIO_Init+0x324>)
 80017ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017f0:	6453      	str	r3, [r2, #68]	; 0x44
 80017f2:	4b63      	ldr	r3, [pc, #396]	; (8001980 <HAL_GPIO_Init+0x324>)
 80017f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017fa:	60fb      	str	r3, [r7, #12]
 80017fc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80017fe:	4a61      	ldr	r2, [pc, #388]	; (8001984 <HAL_GPIO_Init+0x328>)
 8001800:	69fb      	ldr	r3, [r7, #28]
 8001802:	089b      	lsrs	r3, r3, #2
 8001804:	3302      	adds	r3, #2
 8001806:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800180a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800180c:	69fb      	ldr	r3, [r7, #28]
 800180e:	f003 0303 	and.w	r3, r3, #3
 8001812:	009b      	lsls	r3, r3, #2
 8001814:	220f      	movs	r2, #15
 8001816:	fa02 f303 	lsl.w	r3, r2, r3
 800181a:	43db      	mvns	r3, r3
 800181c:	69ba      	ldr	r2, [r7, #24]
 800181e:	4013      	ands	r3, r2
 8001820:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	4a58      	ldr	r2, [pc, #352]	; (8001988 <HAL_GPIO_Init+0x32c>)
 8001826:	4293      	cmp	r3, r2
 8001828:	d037      	beq.n	800189a <HAL_GPIO_Init+0x23e>
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	4a57      	ldr	r2, [pc, #348]	; (800198c <HAL_GPIO_Init+0x330>)
 800182e:	4293      	cmp	r3, r2
 8001830:	d031      	beq.n	8001896 <HAL_GPIO_Init+0x23a>
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	4a56      	ldr	r2, [pc, #344]	; (8001990 <HAL_GPIO_Init+0x334>)
 8001836:	4293      	cmp	r3, r2
 8001838:	d02b      	beq.n	8001892 <HAL_GPIO_Init+0x236>
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	4a55      	ldr	r2, [pc, #340]	; (8001994 <HAL_GPIO_Init+0x338>)
 800183e:	4293      	cmp	r3, r2
 8001840:	d025      	beq.n	800188e <HAL_GPIO_Init+0x232>
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	4a54      	ldr	r2, [pc, #336]	; (8001998 <HAL_GPIO_Init+0x33c>)
 8001846:	4293      	cmp	r3, r2
 8001848:	d01f      	beq.n	800188a <HAL_GPIO_Init+0x22e>
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	4a53      	ldr	r2, [pc, #332]	; (800199c <HAL_GPIO_Init+0x340>)
 800184e:	4293      	cmp	r3, r2
 8001850:	d019      	beq.n	8001886 <HAL_GPIO_Init+0x22a>
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	4a52      	ldr	r2, [pc, #328]	; (80019a0 <HAL_GPIO_Init+0x344>)
 8001856:	4293      	cmp	r3, r2
 8001858:	d013      	beq.n	8001882 <HAL_GPIO_Init+0x226>
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	4a51      	ldr	r2, [pc, #324]	; (80019a4 <HAL_GPIO_Init+0x348>)
 800185e:	4293      	cmp	r3, r2
 8001860:	d00d      	beq.n	800187e <HAL_GPIO_Init+0x222>
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	4a50      	ldr	r2, [pc, #320]	; (80019a8 <HAL_GPIO_Init+0x34c>)
 8001866:	4293      	cmp	r3, r2
 8001868:	d007      	beq.n	800187a <HAL_GPIO_Init+0x21e>
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	4a4f      	ldr	r2, [pc, #316]	; (80019ac <HAL_GPIO_Init+0x350>)
 800186e:	4293      	cmp	r3, r2
 8001870:	d101      	bne.n	8001876 <HAL_GPIO_Init+0x21a>
 8001872:	2309      	movs	r3, #9
 8001874:	e012      	b.n	800189c <HAL_GPIO_Init+0x240>
 8001876:	230a      	movs	r3, #10
 8001878:	e010      	b.n	800189c <HAL_GPIO_Init+0x240>
 800187a:	2308      	movs	r3, #8
 800187c:	e00e      	b.n	800189c <HAL_GPIO_Init+0x240>
 800187e:	2307      	movs	r3, #7
 8001880:	e00c      	b.n	800189c <HAL_GPIO_Init+0x240>
 8001882:	2306      	movs	r3, #6
 8001884:	e00a      	b.n	800189c <HAL_GPIO_Init+0x240>
 8001886:	2305      	movs	r3, #5
 8001888:	e008      	b.n	800189c <HAL_GPIO_Init+0x240>
 800188a:	2304      	movs	r3, #4
 800188c:	e006      	b.n	800189c <HAL_GPIO_Init+0x240>
 800188e:	2303      	movs	r3, #3
 8001890:	e004      	b.n	800189c <HAL_GPIO_Init+0x240>
 8001892:	2302      	movs	r3, #2
 8001894:	e002      	b.n	800189c <HAL_GPIO_Init+0x240>
 8001896:	2301      	movs	r3, #1
 8001898:	e000      	b.n	800189c <HAL_GPIO_Init+0x240>
 800189a:	2300      	movs	r3, #0
 800189c:	69fa      	ldr	r2, [r7, #28]
 800189e:	f002 0203 	and.w	r2, r2, #3
 80018a2:	0092      	lsls	r2, r2, #2
 80018a4:	4093      	lsls	r3, r2
 80018a6:	69ba      	ldr	r2, [r7, #24]
 80018a8:	4313      	orrs	r3, r2
 80018aa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80018ac:	4935      	ldr	r1, [pc, #212]	; (8001984 <HAL_GPIO_Init+0x328>)
 80018ae:	69fb      	ldr	r3, [r7, #28]
 80018b0:	089b      	lsrs	r3, r3, #2
 80018b2:	3302      	adds	r3, #2
 80018b4:	69ba      	ldr	r2, [r7, #24]
 80018b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80018ba:	4b3d      	ldr	r3, [pc, #244]	; (80019b0 <HAL_GPIO_Init+0x354>)
 80018bc:	689b      	ldr	r3, [r3, #8]
 80018be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018c0:	693b      	ldr	r3, [r7, #16]
 80018c2:	43db      	mvns	r3, r3
 80018c4:	69ba      	ldr	r2, [r7, #24]
 80018c6:	4013      	ands	r3, r2
 80018c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d003      	beq.n	80018de <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80018d6:	69ba      	ldr	r2, [r7, #24]
 80018d8:	693b      	ldr	r3, [r7, #16]
 80018da:	4313      	orrs	r3, r2
 80018dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80018de:	4a34      	ldr	r2, [pc, #208]	; (80019b0 <HAL_GPIO_Init+0x354>)
 80018e0:	69bb      	ldr	r3, [r7, #24]
 80018e2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80018e4:	4b32      	ldr	r3, [pc, #200]	; (80019b0 <HAL_GPIO_Init+0x354>)
 80018e6:	68db      	ldr	r3, [r3, #12]
 80018e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018ea:	693b      	ldr	r3, [r7, #16]
 80018ec:	43db      	mvns	r3, r3
 80018ee:	69ba      	ldr	r2, [r7, #24]
 80018f0:	4013      	ands	r3, r2
 80018f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d003      	beq.n	8001908 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001900:	69ba      	ldr	r2, [r7, #24]
 8001902:	693b      	ldr	r3, [r7, #16]
 8001904:	4313      	orrs	r3, r2
 8001906:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001908:	4a29      	ldr	r2, [pc, #164]	; (80019b0 <HAL_GPIO_Init+0x354>)
 800190a:	69bb      	ldr	r3, [r7, #24]
 800190c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800190e:	4b28      	ldr	r3, [pc, #160]	; (80019b0 <HAL_GPIO_Init+0x354>)
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001914:	693b      	ldr	r3, [r7, #16]
 8001916:	43db      	mvns	r3, r3
 8001918:	69ba      	ldr	r2, [r7, #24]
 800191a:	4013      	ands	r3, r2
 800191c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	685b      	ldr	r3, [r3, #4]
 8001922:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001926:	2b00      	cmp	r3, #0
 8001928:	d003      	beq.n	8001932 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800192a:	69ba      	ldr	r2, [r7, #24]
 800192c:	693b      	ldr	r3, [r7, #16]
 800192e:	4313      	orrs	r3, r2
 8001930:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001932:	4a1f      	ldr	r2, [pc, #124]	; (80019b0 <HAL_GPIO_Init+0x354>)
 8001934:	69bb      	ldr	r3, [r7, #24]
 8001936:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001938:	4b1d      	ldr	r3, [pc, #116]	; (80019b0 <HAL_GPIO_Init+0x354>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800193e:	693b      	ldr	r3, [r7, #16]
 8001940:	43db      	mvns	r3, r3
 8001942:	69ba      	ldr	r2, [r7, #24]
 8001944:	4013      	ands	r3, r2
 8001946:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001950:	2b00      	cmp	r3, #0
 8001952:	d003      	beq.n	800195c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001954:	69ba      	ldr	r2, [r7, #24]
 8001956:	693b      	ldr	r3, [r7, #16]
 8001958:	4313      	orrs	r3, r2
 800195a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800195c:	4a14      	ldr	r2, [pc, #80]	; (80019b0 <HAL_GPIO_Init+0x354>)
 800195e:	69bb      	ldr	r3, [r7, #24]
 8001960:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001962:	69fb      	ldr	r3, [r7, #28]
 8001964:	3301      	adds	r3, #1
 8001966:	61fb      	str	r3, [r7, #28]
 8001968:	69fb      	ldr	r3, [r7, #28]
 800196a:	2b0f      	cmp	r3, #15
 800196c:	f67f ae84 	bls.w	8001678 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001970:	bf00      	nop
 8001972:	bf00      	nop
 8001974:	3724      	adds	r7, #36	; 0x24
 8001976:	46bd      	mov	sp, r7
 8001978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197c:	4770      	bx	lr
 800197e:	bf00      	nop
 8001980:	40023800 	.word	0x40023800
 8001984:	40013800 	.word	0x40013800
 8001988:	40020000 	.word	0x40020000
 800198c:	40020400 	.word	0x40020400
 8001990:	40020800 	.word	0x40020800
 8001994:	40020c00 	.word	0x40020c00
 8001998:	40021000 	.word	0x40021000
 800199c:	40021400 	.word	0x40021400
 80019a0:	40021800 	.word	0x40021800
 80019a4:	40021c00 	.word	0x40021c00
 80019a8:	40022000 	.word	0x40022000
 80019ac:	40022400 	.word	0x40022400
 80019b0:	40013c00 	.word	0x40013c00

080019b4 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b084      	sub	sp, #16
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d101      	bne.n	80019c6 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 80019c2:	2301      	movs	r3, #1
 80019c4:	e0bf      	b.n	8001b46 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 80019cc:	b2db      	uxtb	r3, r3
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d106      	bne.n	80019e0 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	2200      	movs	r2, #0
 80019d6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 80019da:	6878      	ldr	r0, [r7, #4]
 80019dc:	f7ff fae4 	bl	8000fa8 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2202      	movs	r2, #2
 80019e4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	699a      	ldr	r2, [r3, #24]
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 80019f6:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	6999      	ldr	r1, [r3, #24]
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	685a      	ldr	r2, [r3, #4]
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	689b      	ldr	r3, [r3, #8]
 8001a06:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8001a0c:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	691b      	ldr	r3, [r3, #16]
 8001a12:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	430a      	orrs	r2, r1
 8001a1a:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	6899      	ldr	r1, [r3, #8]
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681a      	ldr	r2, [r3, #0]
 8001a26:	4b4a      	ldr	r3, [pc, #296]	; (8001b50 <HAL_LTDC_Init+0x19c>)
 8001a28:	400b      	ands	r3, r1
 8001a2a:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	695b      	ldr	r3, [r3, #20]
 8001a30:	041b      	lsls	r3, r3, #16
 8001a32:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	6899      	ldr	r1, [r3, #8]
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	699a      	ldr	r2, [r3, #24]
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	431a      	orrs	r2, r3
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	430a      	orrs	r2, r1
 8001a48:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	68d9      	ldr	r1, [r3, #12]
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681a      	ldr	r2, [r3, #0]
 8001a54:	4b3e      	ldr	r3, [pc, #248]	; (8001b50 <HAL_LTDC_Init+0x19c>)
 8001a56:	400b      	ands	r3, r1
 8001a58:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	69db      	ldr	r3, [r3, #28]
 8001a5e:	041b      	lsls	r3, r3, #16
 8001a60:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	68d9      	ldr	r1, [r3, #12]
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6a1a      	ldr	r2, [r3, #32]
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	431a      	orrs	r2, r3
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	430a      	orrs	r2, r1
 8001a76:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	6919      	ldr	r1, [r3, #16]
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681a      	ldr	r2, [r3, #0]
 8001a82:	4b33      	ldr	r3, [pc, #204]	; (8001b50 <HAL_LTDC_Init+0x19c>)
 8001a84:	400b      	ands	r3, r1
 8001a86:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a8c:	041b      	lsls	r3, r3, #16
 8001a8e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	6919      	ldr	r1, [r3, #16]
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	431a      	orrs	r2, r3
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	430a      	orrs	r2, r1
 8001aa4:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	6959      	ldr	r1, [r3, #20]
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681a      	ldr	r2, [r3, #0]
 8001ab0:	4b27      	ldr	r3, [pc, #156]	; (8001b50 <HAL_LTDC_Init+0x19c>)
 8001ab2:	400b      	ands	r3, r1
 8001ab4:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aba:	041b      	lsls	r3, r3, #16
 8001abc:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	6959      	ldr	r1, [r3, #20]
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	431a      	orrs	r2, r3
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	430a      	orrs	r2, r1
 8001ad2:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001ada:	021b      	lsls	r3, r3, #8
 8001adc:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8001ae4:	041b      	lsls	r3, r3, #16
 8001ae6:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8001af6:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001afe:	68ba      	ldr	r2, [r7, #8]
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	4313      	orrs	r3, r2
 8001b04:	687a      	ldr	r2, [r7, #4]
 8001b06:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8001b0a:	431a      	orrs	r2, r3
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	430a      	orrs	r2, r1
 8001b12:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f042 0206 	orr.w	r2, r2, #6
 8001b22:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	699a      	ldr	r2, [r3, #24]
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f042 0201 	orr.w	r2, r2, #1
 8001b32:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2200      	movs	r2, #0
 8001b38:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	2201      	movs	r2, #1
 8001b40:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8001b44:	2300      	movs	r3, #0
}
 8001b46:	4618      	mov	r0, r3
 8001b48:	3710      	adds	r7, #16
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	bf00      	nop
 8001b50:	f000f800 	.word	0xf000f800

08001b54 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b084      	sub	sp, #16
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b62:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b6a:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	f003 0304 	and.w	r3, r3, #4
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d023      	beq.n	8001bbe <HAL_LTDC_IRQHandler+0x6a>
 8001b76:	68bb      	ldr	r3, [r7, #8]
 8001b78:	f003 0304 	and.w	r3, r3, #4
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d01e      	beq.n	8001bbe <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f022 0204 	bic.w	r2, r2, #4
 8001b8e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	2204      	movs	r2, #4
 8001b96:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001b9e:	f043 0201 	orr.w	r2, r3, #1
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2204      	movs	r2, #4
 8001bac:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8001bb8:	6878      	ldr	r0, [r7, #4]
 8001bba:	f000 f86f 	bl	8001c9c <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	f003 0302 	and.w	r3, r3, #2
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d023      	beq.n	8001c10 <HAL_LTDC_IRQHandler+0xbc>
 8001bc8:	68bb      	ldr	r3, [r7, #8]
 8001bca:	f003 0302 	and.w	r3, r3, #2
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d01e      	beq.n	8001c10 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f022 0202 	bic.w	r2, r2, #2
 8001be0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	2202      	movs	r2, #2
 8001be8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001bf0:	f043 0202 	orr.w	r2, r3, #2
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	2204      	movs	r2, #4
 8001bfe:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	2200      	movs	r2, #0
 8001c06:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8001c0a:	6878      	ldr	r0, [r7, #4]
 8001c0c:	f000 f846 	bl	8001c9c <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	f003 0301 	and.w	r3, r3, #1
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d01b      	beq.n	8001c52 <HAL_LTDC_IRQHandler+0xfe>
 8001c1a:	68bb      	ldr	r3, [r7, #8]
 8001c1c:	f003 0301 	and.w	r3, r3, #1
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d016      	beq.n	8001c52 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f022 0201 	bic.w	r2, r2, #1
 8001c32:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	2201      	movs	r2, #1
 8001c3a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2201      	movs	r2, #1
 8001c40:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2200      	movs	r2, #0
 8001c48:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8001c4c:	6878      	ldr	r0, [r7, #4]
 8001c4e:	f000 f82f 	bl	8001cb0 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	f003 0308 	and.w	r3, r3, #8
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d01b      	beq.n	8001c94 <HAL_LTDC_IRQHandler+0x140>
 8001c5c:	68bb      	ldr	r3, [r7, #8]
 8001c5e:	f003 0308 	and.w	r3, r3, #8
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d016      	beq.n	8001c94 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f022 0208 	bic.w	r2, r2, #8
 8001c74:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	2208      	movs	r2, #8
 8001c7c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	2201      	movs	r2, #1
 8001c82:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	2200      	movs	r2, #0
 8001c8a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8001c8e:	6878      	ldr	r0, [r7, #4]
 8001c90:	f000 f818 	bl	8001cc4 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8001c94:	bf00      	nop
 8001c96:	3710      	adds	r7, #16
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bd80      	pop	{r7, pc}

08001c9c <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	b083      	sub	sp, #12
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8001ca4:	bf00      	nop
 8001ca6:	370c      	adds	r7, #12
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cae:	4770      	bx	lr

08001cb0 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	b083      	sub	sp, #12
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8001cb8:	bf00      	nop
 8001cba:	370c      	adds	r7, #12
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc2:	4770      	bx	lr

08001cc4 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	b083      	sub	sp, #12
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8001ccc:	bf00      	nop
 8001cce:	370c      	adds	r7, #12
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd6:	4770      	bx	lr

08001cd8 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8001cd8:	b5b0      	push	{r4, r5, r7, lr}
 8001cda:	b084      	sub	sp, #16
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	60f8      	str	r0, [r7, #12]
 8001ce0:	60b9      	str	r1, [r7, #8]
 8001ce2:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8001cea:	2b01      	cmp	r3, #1
 8001cec:	d101      	bne.n	8001cf2 <HAL_LTDC_ConfigLayer+0x1a>
 8001cee:	2302      	movs	r3, #2
 8001cf0:	e02c      	b.n	8001d4c <HAL_LTDC_ConfigLayer+0x74>
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	2201      	movs	r2, #1
 8001cf6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	2202      	movs	r2, #2
 8001cfe:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8001d02:	68fa      	ldr	r2, [r7, #12]
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2134      	movs	r1, #52	; 0x34
 8001d08:	fb01 f303 	mul.w	r3, r1, r3
 8001d0c:	4413      	add	r3, r2
 8001d0e:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8001d12:	68bb      	ldr	r3, [r7, #8]
 8001d14:	4614      	mov	r4, r2
 8001d16:	461d      	mov	r5, r3
 8001d18:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d1a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d1c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d1e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d20:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d22:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d24:	682b      	ldr	r3, [r5, #0]
 8001d26:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8001d28:	687a      	ldr	r2, [r7, #4]
 8001d2a:	68b9      	ldr	r1, [r7, #8]
 8001d2c:	68f8      	ldr	r0, [r7, #12]
 8001d2e:	f000 f847 	bl	8001dc0 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	2201      	movs	r2, #1
 8001d38:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	2201      	movs	r2, #1
 8001d3e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	2200      	movs	r2, #0
 8001d46:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8001d4a:	2300      	movs	r3, #0
}
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	3710      	adds	r7, #16
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bdb0      	pop	{r4, r5, r7, pc}

08001d54 <HAL_LTDC_SetAddress>:
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1).
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_SetAddress(LTDC_HandleTypeDef *hltdc, uint32_t Address, uint32_t LayerIdx)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b086      	sub	sp, #24
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	60f8      	str	r0, [r7, #12]
 8001d5c:	60b9      	str	r1, [r7, #8]
 8001d5e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8001d66:	2b01      	cmp	r3, #1
 8001d68:	d101      	bne.n	8001d6e <HAL_LTDC_SetAddress+0x1a>
 8001d6a:	2302      	movs	r3, #2
 8001d6c:	e024      	b.n	8001db8 <HAL_LTDC_SetAddress+0x64>
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	2201      	movs	r2, #1
 8001d72:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	2202      	movs	r2, #2
 8001d7a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Get layer configuration from handle structure */
  pLayerCfg = &hltdc->LayerCfg[LayerIdx];
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	2234      	movs	r2, #52	; 0x34
 8001d82:	fb02 f303 	mul.w	r3, r2, r3
 8001d86:	3338      	adds	r3, #56	; 0x38
 8001d88:	68fa      	ldr	r2, [r7, #12]
 8001d8a:	4413      	add	r3, r2
 8001d8c:	617b      	str	r3, [r7, #20]

  /* Reconfigure the Address */
  pLayerCfg->FBStartAdress = Address;
 8001d8e:	697b      	ldr	r3, [r7, #20]
 8001d90:	68ba      	ldr	r2, [r7, #8]
 8001d92:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set LTDC parameters */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8001d94:	687a      	ldr	r2, [r7, #4]
 8001d96:	6979      	ldr	r1, [r7, #20]
 8001d98:	68f8      	ldr	r0, [r7, #12]
 8001d9a:	f000 f811 	bl	8001dc0 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	2201      	movs	r2, #1
 8001da4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	2201      	movs	r2, #1
 8001daa:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	2200      	movs	r2, #0
 8001db2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8001db6:	2300      	movs	r3, #0
}
 8001db8:	4618      	mov	r0, r3
 8001dba:	3718      	adds	r7, #24
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bd80      	pop	{r7, pc}

08001dc0 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	b089      	sub	sp, #36	; 0x24
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	60f8      	str	r0, [r7, #12]
 8001dc8:	60b9      	str	r1, [r7, #8]
 8001dca:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8001dcc:	68bb      	ldr	r3, [r7, #8]
 8001dce:	685a      	ldr	r2, [r3, #4]
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	68db      	ldr	r3, [r3, #12]
 8001dd6:	0c1b      	lsrs	r3, r3, #16
 8001dd8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ddc:	4413      	add	r3, r2
 8001dde:	041b      	lsls	r3, r3, #16
 8001de0:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	461a      	mov	r2, r3
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	01db      	lsls	r3, r3, #7
 8001dec:	4413      	add	r3, r2
 8001dee:	3384      	adds	r3, #132	; 0x84
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	68fa      	ldr	r2, [r7, #12]
 8001df4:	6812      	ldr	r2, [r2, #0]
 8001df6:	4611      	mov	r1, r2
 8001df8:	687a      	ldr	r2, [r7, #4]
 8001dfa:	01d2      	lsls	r2, r2, #7
 8001dfc:	440a      	add	r2, r1
 8001dfe:	3284      	adds	r2, #132	; 0x84
 8001e00:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8001e04:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8001e06:	68bb      	ldr	r3, [r7, #8]
 8001e08:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	68db      	ldr	r3, [r3, #12]
 8001e10:	0c1b      	lsrs	r3, r3, #16
 8001e12:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8001e16:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8001e18:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4619      	mov	r1, r3
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	01db      	lsls	r3, r3, #7
 8001e24:	440b      	add	r3, r1
 8001e26:	3384      	adds	r3, #132	; 0x84
 8001e28:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8001e2a:	69fb      	ldr	r3, [r7, #28]
 8001e2c:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8001e2e:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8001e30:	68bb      	ldr	r3, [r7, #8]
 8001e32:	68da      	ldr	r2, [r3, #12]
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	68db      	ldr	r3, [r3, #12]
 8001e3a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001e3e:	4413      	add	r3, r2
 8001e40:	041b      	lsls	r3, r3, #16
 8001e42:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	461a      	mov	r2, r3
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	01db      	lsls	r3, r3, #7
 8001e4e:	4413      	add	r3, r2
 8001e50:	3384      	adds	r3, #132	; 0x84
 8001e52:	689b      	ldr	r3, [r3, #8]
 8001e54:	68fa      	ldr	r2, [r7, #12]
 8001e56:	6812      	ldr	r2, [r2, #0]
 8001e58:	4611      	mov	r1, r2
 8001e5a:	687a      	ldr	r2, [r7, #4]
 8001e5c:	01d2      	lsls	r2, r2, #7
 8001e5e:	440a      	add	r2, r1
 8001e60:	3284      	adds	r2, #132	; 0x84
 8001e62:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8001e66:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8001e68:	68bb      	ldr	r3, [r7, #8]
 8001e6a:	689a      	ldr	r2, [r3, #8]
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	68db      	ldr	r3, [r3, #12]
 8001e72:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001e76:	4413      	add	r3, r2
 8001e78:	1c5a      	adds	r2, r3, #1
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4619      	mov	r1, r3
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	01db      	lsls	r3, r3, #7
 8001e84:	440b      	add	r3, r1
 8001e86:	3384      	adds	r3, #132	; 0x84
 8001e88:	4619      	mov	r1, r3
 8001e8a:	69fb      	ldr	r3, [r7, #28]
 8001e8c:	4313      	orrs	r3, r2
 8001e8e:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	461a      	mov	r2, r3
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	01db      	lsls	r3, r3, #7
 8001e9a:	4413      	add	r3, r2
 8001e9c:	3384      	adds	r3, #132	; 0x84
 8001e9e:	691b      	ldr	r3, [r3, #16]
 8001ea0:	68fa      	ldr	r2, [r7, #12]
 8001ea2:	6812      	ldr	r2, [r2, #0]
 8001ea4:	4611      	mov	r1, r2
 8001ea6:	687a      	ldr	r2, [r7, #4]
 8001ea8:	01d2      	lsls	r2, r2, #7
 8001eaa:	440a      	add	r2, r1
 8001eac:	3284      	adds	r2, #132	; 0x84
 8001eae:	f023 0307 	bic.w	r3, r3, #7
 8001eb2:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	461a      	mov	r2, r3
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	01db      	lsls	r3, r3, #7
 8001ebe:	4413      	add	r3, r2
 8001ec0:	3384      	adds	r3, #132	; 0x84
 8001ec2:	461a      	mov	r2, r3
 8001ec4:	68bb      	ldr	r3, [r7, #8]
 8001ec6:	691b      	ldr	r3, [r3, #16]
 8001ec8:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8001eca:	68bb      	ldr	r3, [r7, #8]
 8001ecc:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8001ed0:	021b      	lsls	r3, r3, #8
 8001ed2:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8001ed4:	68bb      	ldr	r3, [r7, #8]
 8001ed6:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8001eda:	041b      	lsls	r3, r3, #16
 8001edc:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8001ede:	68bb      	ldr	r3, [r7, #8]
 8001ee0:	699b      	ldr	r3, [r3, #24]
 8001ee2:	061b      	lsls	r3, r3, #24
 8001ee4:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	461a      	mov	r2, r3
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	01db      	lsls	r3, r3, #7
 8001ef0:	4413      	add	r3, r2
 8001ef2:	3384      	adds	r3, #132	; 0x84
 8001ef4:	699b      	ldr	r3, [r3, #24]
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	461a      	mov	r2, r3
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	01db      	lsls	r3, r3, #7
 8001f00:	4413      	add	r3, r2
 8001f02:	3384      	adds	r3, #132	; 0x84
 8001f04:	461a      	mov	r2, r3
 8001f06:	2300      	movs	r3, #0
 8001f08:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8001f0a:	68bb      	ldr	r3, [r7, #8]
 8001f0c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001f10:	461a      	mov	r2, r3
 8001f12:	69fb      	ldr	r3, [r7, #28]
 8001f14:	431a      	orrs	r2, r3
 8001f16:	69bb      	ldr	r3, [r7, #24]
 8001f18:	431a      	orrs	r2, r3
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4619      	mov	r1, r3
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	01db      	lsls	r3, r3, #7
 8001f24:	440b      	add	r3, r1
 8001f26:	3384      	adds	r3, #132	; 0x84
 8001f28:	4619      	mov	r1, r3
 8001f2a:	697b      	ldr	r3, [r7, #20]
 8001f2c:	4313      	orrs	r3, r2
 8001f2e:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	461a      	mov	r2, r3
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	01db      	lsls	r3, r3, #7
 8001f3a:	4413      	add	r3, r2
 8001f3c:	3384      	adds	r3, #132	; 0x84
 8001f3e:	695b      	ldr	r3, [r3, #20]
 8001f40:	68fa      	ldr	r2, [r7, #12]
 8001f42:	6812      	ldr	r2, [r2, #0]
 8001f44:	4611      	mov	r1, r2
 8001f46:	687a      	ldr	r2, [r7, #4]
 8001f48:	01d2      	lsls	r2, r2, #7
 8001f4a:	440a      	add	r2, r1
 8001f4c:	3284      	adds	r2, #132	; 0x84
 8001f4e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001f52:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	461a      	mov	r2, r3
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	01db      	lsls	r3, r3, #7
 8001f5e:	4413      	add	r3, r2
 8001f60:	3384      	adds	r3, #132	; 0x84
 8001f62:	461a      	mov	r2, r3
 8001f64:	68bb      	ldr	r3, [r7, #8]
 8001f66:	695b      	ldr	r3, [r3, #20]
 8001f68:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	461a      	mov	r2, r3
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	01db      	lsls	r3, r3, #7
 8001f74:	4413      	add	r3, r2
 8001f76:	3384      	adds	r3, #132	; 0x84
 8001f78:	69db      	ldr	r3, [r3, #28]
 8001f7a:	68fa      	ldr	r2, [r7, #12]
 8001f7c:	6812      	ldr	r2, [r2, #0]
 8001f7e:	4611      	mov	r1, r2
 8001f80:	687a      	ldr	r2, [r7, #4]
 8001f82:	01d2      	lsls	r2, r2, #7
 8001f84:	440a      	add	r2, r1
 8001f86:	3284      	adds	r2, #132	; 0x84
 8001f88:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001f8c:	f023 0307 	bic.w	r3, r3, #7
 8001f90:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8001f92:	68bb      	ldr	r3, [r7, #8]
 8001f94:	69da      	ldr	r2, [r3, #28]
 8001f96:	68bb      	ldr	r3, [r7, #8]
 8001f98:	6a1b      	ldr	r3, [r3, #32]
 8001f9a:	68f9      	ldr	r1, [r7, #12]
 8001f9c:	6809      	ldr	r1, [r1, #0]
 8001f9e:	4608      	mov	r0, r1
 8001fa0:	6879      	ldr	r1, [r7, #4]
 8001fa2:	01c9      	lsls	r1, r1, #7
 8001fa4:	4401      	add	r1, r0
 8001fa6:	3184      	adds	r1, #132	; 0x84
 8001fa8:	4313      	orrs	r3, r2
 8001faa:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	461a      	mov	r2, r3
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	01db      	lsls	r3, r3, #7
 8001fb6:	4413      	add	r3, r2
 8001fb8:	3384      	adds	r3, #132	; 0x84
 8001fba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	461a      	mov	r2, r3
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	01db      	lsls	r3, r3, #7
 8001fc6:	4413      	add	r3, r2
 8001fc8:	3384      	adds	r3, #132	; 0x84
 8001fca:	461a      	mov	r2, r3
 8001fcc:	2300      	movs	r3, #0
 8001fce:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	461a      	mov	r2, r3
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	01db      	lsls	r3, r3, #7
 8001fda:	4413      	add	r3, r2
 8001fdc:	3384      	adds	r3, #132	; 0x84
 8001fde:	461a      	mov	r2, r3
 8001fe0:	68bb      	ldr	r3, [r7, #8]
 8001fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fe4:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8001fe6:	68bb      	ldr	r3, [r7, #8]
 8001fe8:	691b      	ldr	r3, [r3, #16]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d102      	bne.n	8001ff4 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8001fee:	2304      	movs	r3, #4
 8001ff0:	61fb      	str	r3, [r7, #28]
 8001ff2:	e01b      	b.n	800202c <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8001ff4:	68bb      	ldr	r3, [r7, #8]
 8001ff6:	691b      	ldr	r3, [r3, #16]
 8001ff8:	2b01      	cmp	r3, #1
 8001ffa:	d102      	bne.n	8002002 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8001ffc:	2303      	movs	r3, #3
 8001ffe:	61fb      	str	r3, [r7, #28]
 8002000:	e014      	b.n	800202c <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8002002:	68bb      	ldr	r3, [r7, #8]
 8002004:	691b      	ldr	r3, [r3, #16]
 8002006:	2b04      	cmp	r3, #4
 8002008:	d00b      	beq.n	8002022 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800200a:	68bb      	ldr	r3, [r7, #8]
 800200c:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800200e:	2b02      	cmp	r3, #2
 8002010:	d007      	beq.n	8002022 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8002012:	68bb      	ldr	r3, [r7, #8]
 8002014:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8002016:	2b03      	cmp	r3, #3
 8002018:	d003      	beq.n	8002022 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800201a:	68bb      	ldr	r3, [r7, #8]
 800201c:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800201e:	2b07      	cmp	r3, #7
 8002020:	d102      	bne.n	8002028 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8002022:	2302      	movs	r3, #2
 8002024:	61fb      	str	r3, [r7, #28]
 8002026:	e001      	b.n	800202c <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8002028:	2301      	movs	r3, #1
 800202a:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	461a      	mov	r2, r3
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	01db      	lsls	r3, r3, #7
 8002036:	4413      	add	r3, r2
 8002038:	3384      	adds	r3, #132	; 0x84
 800203a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800203c:	68fa      	ldr	r2, [r7, #12]
 800203e:	6812      	ldr	r2, [r2, #0]
 8002040:	4611      	mov	r1, r2
 8002042:	687a      	ldr	r2, [r7, #4]
 8002044:	01d2      	lsls	r2, r2, #7
 8002046:	440a      	add	r2, r1
 8002048:	3284      	adds	r2, #132	; 0x84
 800204a:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 800204e:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8002050:	68bb      	ldr	r3, [r7, #8]
 8002052:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002054:	69fa      	ldr	r2, [r7, #28]
 8002056:	fb02 f303 	mul.w	r3, r2, r3
 800205a:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800205c:	68bb      	ldr	r3, [r7, #8]
 800205e:	6859      	ldr	r1, [r3, #4]
 8002060:	68bb      	ldr	r3, [r7, #8]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	1acb      	subs	r3, r1, r3
 8002066:	69f9      	ldr	r1, [r7, #28]
 8002068:	fb01 f303 	mul.w	r3, r1, r3
 800206c:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800206e:	68f9      	ldr	r1, [r7, #12]
 8002070:	6809      	ldr	r1, [r1, #0]
 8002072:	4608      	mov	r0, r1
 8002074:	6879      	ldr	r1, [r7, #4]
 8002076:	01c9      	lsls	r1, r1, #7
 8002078:	4401      	add	r1, r0
 800207a:	3184      	adds	r1, #132	; 0x84
 800207c:	4313      	orrs	r3, r2
 800207e:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	461a      	mov	r2, r3
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	01db      	lsls	r3, r3, #7
 800208a:	4413      	add	r3, r2
 800208c:	3384      	adds	r3, #132	; 0x84
 800208e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002090:	68fa      	ldr	r2, [r7, #12]
 8002092:	6812      	ldr	r2, [r2, #0]
 8002094:	4611      	mov	r1, r2
 8002096:	687a      	ldr	r2, [r7, #4]
 8002098:	01d2      	lsls	r2, r2, #7
 800209a:	440a      	add	r2, r1
 800209c:	3284      	adds	r2, #132	; 0x84
 800209e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80020a2:	f023 0307 	bic.w	r3, r3, #7
 80020a6:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	461a      	mov	r2, r3
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	01db      	lsls	r3, r3, #7
 80020b2:	4413      	add	r3, r2
 80020b4:	3384      	adds	r3, #132	; 0x84
 80020b6:	461a      	mov	r2, r3
 80020b8:	68bb      	ldr	r3, [r7, #8]
 80020ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020bc:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	461a      	mov	r2, r3
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	01db      	lsls	r3, r3, #7
 80020c8:	4413      	add	r3, r2
 80020ca:	3384      	adds	r3, #132	; 0x84
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	68fa      	ldr	r2, [r7, #12]
 80020d0:	6812      	ldr	r2, [r2, #0]
 80020d2:	4611      	mov	r1, r2
 80020d4:	687a      	ldr	r2, [r7, #4]
 80020d6:	01d2      	lsls	r2, r2, #7
 80020d8:	440a      	add	r2, r1
 80020da:	3284      	adds	r2, #132	; 0x84
 80020dc:	f043 0301 	orr.w	r3, r3, #1
 80020e0:	6013      	str	r3, [r2, #0]
}
 80020e2:	bf00      	nop
 80020e4:	3724      	adds	r7, #36	; 0x24
 80020e6:	46bd      	mov	sp, r7
 80020e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ec:	4770      	bx	lr
	...

080020f0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b082      	sub	sp, #8
 80020f4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80020f6:	2300      	movs	r3, #0
 80020f8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80020fa:	2300      	movs	r3, #0
 80020fc:	603b      	str	r3, [r7, #0]
 80020fe:	4b20      	ldr	r3, [pc, #128]	; (8002180 <HAL_PWREx_EnableOverDrive+0x90>)
 8002100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002102:	4a1f      	ldr	r2, [pc, #124]	; (8002180 <HAL_PWREx_EnableOverDrive+0x90>)
 8002104:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002108:	6413      	str	r3, [r2, #64]	; 0x40
 800210a:	4b1d      	ldr	r3, [pc, #116]	; (8002180 <HAL_PWREx_EnableOverDrive+0x90>)
 800210c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800210e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002112:	603b      	str	r3, [r7, #0]
 8002114:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002116:	4b1b      	ldr	r3, [pc, #108]	; (8002184 <HAL_PWREx_EnableOverDrive+0x94>)
 8002118:	2201      	movs	r2, #1
 800211a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800211c:	f7ff f95c 	bl	80013d8 <HAL_GetTick>
 8002120:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002122:	e009      	b.n	8002138 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002124:	f7ff f958 	bl	80013d8 <HAL_GetTick>
 8002128:	4602      	mov	r2, r0
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	1ad3      	subs	r3, r2, r3
 800212e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002132:	d901      	bls.n	8002138 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8002134:	2303      	movs	r3, #3
 8002136:	e01f      	b.n	8002178 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002138:	4b13      	ldr	r3, [pc, #76]	; (8002188 <HAL_PWREx_EnableOverDrive+0x98>)
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002140:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002144:	d1ee      	bne.n	8002124 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002146:	4b11      	ldr	r3, [pc, #68]	; (800218c <HAL_PWREx_EnableOverDrive+0x9c>)
 8002148:	2201      	movs	r2, #1
 800214a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800214c:	f7ff f944 	bl	80013d8 <HAL_GetTick>
 8002150:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002152:	e009      	b.n	8002168 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002154:	f7ff f940 	bl	80013d8 <HAL_GetTick>
 8002158:	4602      	mov	r2, r0
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	1ad3      	subs	r3, r2, r3
 800215e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002162:	d901      	bls.n	8002168 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8002164:	2303      	movs	r3, #3
 8002166:	e007      	b.n	8002178 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002168:	4b07      	ldr	r3, [pc, #28]	; (8002188 <HAL_PWREx_EnableOverDrive+0x98>)
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002170:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002174:	d1ee      	bne.n	8002154 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8002176:	2300      	movs	r3, #0
}
 8002178:	4618      	mov	r0, r3
 800217a:	3708      	adds	r7, #8
 800217c:	46bd      	mov	sp, r7
 800217e:	bd80      	pop	{r7, pc}
 8002180:	40023800 	.word	0x40023800
 8002184:	420e0040 	.word	0x420e0040
 8002188:	40007000 	.word	0x40007000
 800218c:	420e0044 	.word	0x420e0044

08002190 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b086      	sub	sp, #24
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2b00      	cmp	r3, #0
 800219c:	d101      	bne.n	80021a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800219e:	2301      	movs	r3, #1
 80021a0:	e267      	b.n	8002672 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f003 0301 	and.w	r3, r3, #1
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d075      	beq.n	800229a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80021ae:	4b88      	ldr	r3, [pc, #544]	; (80023d0 <HAL_RCC_OscConfig+0x240>)
 80021b0:	689b      	ldr	r3, [r3, #8]
 80021b2:	f003 030c 	and.w	r3, r3, #12
 80021b6:	2b04      	cmp	r3, #4
 80021b8:	d00c      	beq.n	80021d4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80021ba:	4b85      	ldr	r3, [pc, #532]	; (80023d0 <HAL_RCC_OscConfig+0x240>)
 80021bc:	689b      	ldr	r3, [r3, #8]
 80021be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80021c2:	2b08      	cmp	r3, #8
 80021c4:	d112      	bne.n	80021ec <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80021c6:	4b82      	ldr	r3, [pc, #520]	; (80023d0 <HAL_RCC_OscConfig+0x240>)
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80021d2:	d10b      	bne.n	80021ec <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021d4:	4b7e      	ldr	r3, [pc, #504]	; (80023d0 <HAL_RCC_OscConfig+0x240>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d05b      	beq.n	8002298 <HAL_RCC_OscConfig+0x108>
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d157      	bne.n	8002298 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80021e8:	2301      	movs	r3, #1
 80021ea:	e242      	b.n	8002672 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021f4:	d106      	bne.n	8002204 <HAL_RCC_OscConfig+0x74>
 80021f6:	4b76      	ldr	r3, [pc, #472]	; (80023d0 <HAL_RCC_OscConfig+0x240>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	4a75      	ldr	r2, [pc, #468]	; (80023d0 <HAL_RCC_OscConfig+0x240>)
 80021fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002200:	6013      	str	r3, [r2, #0]
 8002202:	e01d      	b.n	8002240 <HAL_RCC_OscConfig+0xb0>
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800220c:	d10c      	bne.n	8002228 <HAL_RCC_OscConfig+0x98>
 800220e:	4b70      	ldr	r3, [pc, #448]	; (80023d0 <HAL_RCC_OscConfig+0x240>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4a6f      	ldr	r2, [pc, #444]	; (80023d0 <HAL_RCC_OscConfig+0x240>)
 8002214:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002218:	6013      	str	r3, [r2, #0]
 800221a:	4b6d      	ldr	r3, [pc, #436]	; (80023d0 <HAL_RCC_OscConfig+0x240>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4a6c      	ldr	r2, [pc, #432]	; (80023d0 <HAL_RCC_OscConfig+0x240>)
 8002220:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002224:	6013      	str	r3, [r2, #0]
 8002226:	e00b      	b.n	8002240 <HAL_RCC_OscConfig+0xb0>
 8002228:	4b69      	ldr	r3, [pc, #420]	; (80023d0 <HAL_RCC_OscConfig+0x240>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4a68      	ldr	r2, [pc, #416]	; (80023d0 <HAL_RCC_OscConfig+0x240>)
 800222e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002232:	6013      	str	r3, [r2, #0]
 8002234:	4b66      	ldr	r3, [pc, #408]	; (80023d0 <HAL_RCC_OscConfig+0x240>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4a65      	ldr	r2, [pc, #404]	; (80023d0 <HAL_RCC_OscConfig+0x240>)
 800223a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800223e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	2b00      	cmp	r3, #0
 8002246:	d013      	beq.n	8002270 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002248:	f7ff f8c6 	bl	80013d8 <HAL_GetTick>
 800224c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800224e:	e008      	b.n	8002262 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002250:	f7ff f8c2 	bl	80013d8 <HAL_GetTick>
 8002254:	4602      	mov	r2, r0
 8002256:	693b      	ldr	r3, [r7, #16]
 8002258:	1ad3      	subs	r3, r2, r3
 800225a:	2b64      	cmp	r3, #100	; 0x64
 800225c:	d901      	bls.n	8002262 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800225e:	2303      	movs	r3, #3
 8002260:	e207      	b.n	8002672 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002262:	4b5b      	ldr	r3, [pc, #364]	; (80023d0 <HAL_RCC_OscConfig+0x240>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800226a:	2b00      	cmp	r3, #0
 800226c:	d0f0      	beq.n	8002250 <HAL_RCC_OscConfig+0xc0>
 800226e:	e014      	b.n	800229a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002270:	f7ff f8b2 	bl	80013d8 <HAL_GetTick>
 8002274:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002276:	e008      	b.n	800228a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002278:	f7ff f8ae 	bl	80013d8 <HAL_GetTick>
 800227c:	4602      	mov	r2, r0
 800227e:	693b      	ldr	r3, [r7, #16]
 8002280:	1ad3      	subs	r3, r2, r3
 8002282:	2b64      	cmp	r3, #100	; 0x64
 8002284:	d901      	bls.n	800228a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002286:	2303      	movs	r3, #3
 8002288:	e1f3      	b.n	8002672 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800228a:	4b51      	ldr	r3, [pc, #324]	; (80023d0 <HAL_RCC_OscConfig+0x240>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002292:	2b00      	cmp	r3, #0
 8002294:	d1f0      	bne.n	8002278 <HAL_RCC_OscConfig+0xe8>
 8002296:	e000      	b.n	800229a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002298:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f003 0302 	and.w	r3, r3, #2
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d063      	beq.n	800236e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80022a6:	4b4a      	ldr	r3, [pc, #296]	; (80023d0 <HAL_RCC_OscConfig+0x240>)
 80022a8:	689b      	ldr	r3, [r3, #8]
 80022aa:	f003 030c 	and.w	r3, r3, #12
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d00b      	beq.n	80022ca <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80022b2:	4b47      	ldr	r3, [pc, #284]	; (80023d0 <HAL_RCC_OscConfig+0x240>)
 80022b4:	689b      	ldr	r3, [r3, #8]
 80022b6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80022ba:	2b08      	cmp	r3, #8
 80022bc:	d11c      	bne.n	80022f8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80022be:	4b44      	ldr	r3, [pc, #272]	; (80023d0 <HAL_RCC_OscConfig+0x240>)
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d116      	bne.n	80022f8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022ca:	4b41      	ldr	r3, [pc, #260]	; (80023d0 <HAL_RCC_OscConfig+0x240>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f003 0302 	and.w	r3, r3, #2
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d005      	beq.n	80022e2 <HAL_RCC_OscConfig+0x152>
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	68db      	ldr	r3, [r3, #12]
 80022da:	2b01      	cmp	r3, #1
 80022dc:	d001      	beq.n	80022e2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80022de:	2301      	movs	r3, #1
 80022e0:	e1c7      	b.n	8002672 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022e2:	4b3b      	ldr	r3, [pc, #236]	; (80023d0 <HAL_RCC_OscConfig+0x240>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	691b      	ldr	r3, [r3, #16]
 80022ee:	00db      	lsls	r3, r3, #3
 80022f0:	4937      	ldr	r1, [pc, #220]	; (80023d0 <HAL_RCC_OscConfig+0x240>)
 80022f2:	4313      	orrs	r3, r2
 80022f4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022f6:	e03a      	b.n	800236e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	68db      	ldr	r3, [r3, #12]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d020      	beq.n	8002342 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002300:	4b34      	ldr	r3, [pc, #208]	; (80023d4 <HAL_RCC_OscConfig+0x244>)
 8002302:	2201      	movs	r2, #1
 8002304:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002306:	f7ff f867 	bl	80013d8 <HAL_GetTick>
 800230a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800230c:	e008      	b.n	8002320 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800230e:	f7ff f863 	bl	80013d8 <HAL_GetTick>
 8002312:	4602      	mov	r2, r0
 8002314:	693b      	ldr	r3, [r7, #16]
 8002316:	1ad3      	subs	r3, r2, r3
 8002318:	2b02      	cmp	r3, #2
 800231a:	d901      	bls.n	8002320 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800231c:	2303      	movs	r3, #3
 800231e:	e1a8      	b.n	8002672 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002320:	4b2b      	ldr	r3, [pc, #172]	; (80023d0 <HAL_RCC_OscConfig+0x240>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f003 0302 	and.w	r3, r3, #2
 8002328:	2b00      	cmp	r3, #0
 800232a:	d0f0      	beq.n	800230e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800232c:	4b28      	ldr	r3, [pc, #160]	; (80023d0 <HAL_RCC_OscConfig+0x240>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	691b      	ldr	r3, [r3, #16]
 8002338:	00db      	lsls	r3, r3, #3
 800233a:	4925      	ldr	r1, [pc, #148]	; (80023d0 <HAL_RCC_OscConfig+0x240>)
 800233c:	4313      	orrs	r3, r2
 800233e:	600b      	str	r3, [r1, #0]
 8002340:	e015      	b.n	800236e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002342:	4b24      	ldr	r3, [pc, #144]	; (80023d4 <HAL_RCC_OscConfig+0x244>)
 8002344:	2200      	movs	r2, #0
 8002346:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002348:	f7ff f846 	bl	80013d8 <HAL_GetTick>
 800234c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800234e:	e008      	b.n	8002362 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002350:	f7ff f842 	bl	80013d8 <HAL_GetTick>
 8002354:	4602      	mov	r2, r0
 8002356:	693b      	ldr	r3, [r7, #16]
 8002358:	1ad3      	subs	r3, r2, r3
 800235a:	2b02      	cmp	r3, #2
 800235c:	d901      	bls.n	8002362 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800235e:	2303      	movs	r3, #3
 8002360:	e187      	b.n	8002672 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002362:	4b1b      	ldr	r3, [pc, #108]	; (80023d0 <HAL_RCC_OscConfig+0x240>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f003 0302 	and.w	r3, r3, #2
 800236a:	2b00      	cmp	r3, #0
 800236c:	d1f0      	bne.n	8002350 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f003 0308 	and.w	r3, r3, #8
 8002376:	2b00      	cmp	r3, #0
 8002378:	d036      	beq.n	80023e8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	695b      	ldr	r3, [r3, #20]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d016      	beq.n	80023b0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002382:	4b15      	ldr	r3, [pc, #84]	; (80023d8 <HAL_RCC_OscConfig+0x248>)
 8002384:	2201      	movs	r2, #1
 8002386:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002388:	f7ff f826 	bl	80013d8 <HAL_GetTick>
 800238c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800238e:	e008      	b.n	80023a2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002390:	f7ff f822 	bl	80013d8 <HAL_GetTick>
 8002394:	4602      	mov	r2, r0
 8002396:	693b      	ldr	r3, [r7, #16]
 8002398:	1ad3      	subs	r3, r2, r3
 800239a:	2b02      	cmp	r3, #2
 800239c:	d901      	bls.n	80023a2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800239e:	2303      	movs	r3, #3
 80023a0:	e167      	b.n	8002672 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023a2:	4b0b      	ldr	r3, [pc, #44]	; (80023d0 <HAL_RCC_OscConfig+0x240>)
 80023a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023a6:	f003 0302 	and.w	r3, r3, #2
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d0f0      	beq.n	8002390 <HAL_RCC_OscConfig+0x200>
 80023ae:	e01b      	b.n	80023e8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80023b0:	4b09      	ldr	r3, [pc, #36]	; (80023d8 <HAL_RCC_OscConfig+0x248>)
 80023b2:	2200      	movs	r2, #0
 80023b4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023b6:	f7ff f80f 	bl	80013d8 <HAL_GetTick>
 80023ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023bc:	e00e      	b.n	80023dc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80023be:	f7ff f80b 	bl	80013d8 <HAL_GetTick>
 80023c2:	4602      	mov	r2, r0
 80023c4:	693b      	ldr	r3, [r7, #16]
 80023c6:	1ad3      	subs	r3, r2, r3
 80023c8:	2b02      	cmp	r3, #2
 80023ca:	d907      	bls.n	80023dc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80023cc:	2303      	movs	r3, #3
 80023ce:	e150      	b.n	8002672 <HAL_RCC_OscConfig+0x4e2>
 80023d0:	40023800 	.word	0x40023800
 80023d4:	42470000 	.word	0x42470000
 80023d8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023dc:	4b88      	ldr	r3, [pc, #544]	; (8002600 <HAL_RCC_OscConfig+0x470>)
 80023de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023e0:	f003 0302 	and.w	r3, r3, #2
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d1ea      	bne.n	80023be <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f003 0304 	and.w	r3, r3, #4
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	f000 8097 	beq.w	8002524 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023f6:	2300      	movs	r3, #0
 80023f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023fa:	4b81      	ldr	r3, [pc, #516]	; (8002600 <HAL_RCC_OscConfig+0x470>)
 80023fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002402:	2b00      	cmp	r3, #0
 8002404:	d10f      	bne.n	8002426 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002406:	2300      	movs	r3, #0
 8002408:	60bb      	str	r3, [r7, #8]
 800240a:	4b7d      	ldr	r3, [pc, #500]	; (8002600 <HAL_RCC_OscConfig+0x470>)
 800240c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800240e:	4a7c      	ldr	r2, [pc, #496]	; (8002600 <HAL_RCC_OscConfig+0x470>)
 8002410:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002414:	6413      	str	r3, [r2, #64]	; 0x40
 8002416:	4b7a      	ldr	r3, [pc, #488]	; (8002600 <HAL_RCC_OscConfig+0x470>)
 8002418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800241a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800241e:	60bb      	str	r3, [r7, #8]
 8002420:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002422:	2301      	movs	r3, #1
 8002424:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002426:	4b77      	ldr	r3, [pc, #476]	; (8002604 <HAL_RCC_OscConfig+0x474>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800242e:	2b00      	cmp	r3, #0
 8002430:	d118      	bne.n	8002464 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002432:	4b74      	ldr	r3, [pc, #464]	; (8002604 <HAL_RCC_OscConfig+0x474>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	4a73      	ldr	r2, [pc, #460]	; (8002604 <HAL_RCC_OscConfig+0x474>)
 8002438:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800243c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800243e:	f7fe ffcb 	bl	80013d8 <HAL_GetTick>
 8002442:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002444:	e008      	b.n	8002458 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002446:	f7fe ffc7 	bl	80013d8 <HAL_GetTick>
 800244a:	4602      	mov	r2, r0
 800244c:	693b      	ldr	r3, [r7, #16]
 800244e:	1ad3      	subs	r3, r2, r3
 8002450:	2b02      	cmp	r3, #2
 8002452:	d901      	bls.n	8002458 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002454:	2303      	movs	r3, #3
 8002456:	e10c      	b.n	8002672 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002458:	4b6a      	ldr	r3, [pc, #424]	; (8002604 <HAL_RCC_OscConfig+0x474>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002460:	2b00      	cmp	r3, #0
 8002462:	d0f0      	beq.n	8002446 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	689b      	ldr	r3, [r3, #8]
 8002468:	2b01      	cmp	r3, #1
 800246a:	d106      	bne.n	800247a <HAL_RCC_OscConfig+0x2ea>
 800246c:	4b64      	ldr	r3, [pc, #400]	; (8002600 <HAL_RCC_OscConfig+0x470>)
 800246e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002470:	4a63      	ldr	r2, [pc, #396]	; (8002600 <HAL_RCC_OscConfig+0x470>)
 8002472:	f043 0301 	orr.w	r3, r3, #1
 8002476:	6713      	str	r3, [r2, #112]	; 0x70
 8002478:	e01c      	b.n	80024b4 <HAL_RCC_OscConfig+0x324>
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	689b      	ldr	r3, [r3, #8]
 800247e:	2b05      	cmp	r3, #5
 8002480:	d10c      	bne.n	800249c <HAL_RCC_OscConfig+0x30c>
 8002482:	4b5f      	ldr	r3, [pc, #380]	; (8002600 <HAL_RCC_OscConfig+0x470>)
 8002484:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002486:	4a5e      	ldr	r2, [pc, #376]	; (8002600 <HAL_RCC_OscConfig+0x470>)
 8002488:	f043 0304 	orr.w	r3, r3, #4
 800248c:	6713      	str	r3, [r2, #112]	; 0x70
 800248e:	4b5c      	ldr	r3, [pc, #368]	; (8002600 <HAL_RCC_OscConfig+0x470>)
 8002490:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002492:	4a5b      	ldr	r2, [pc, #364]	; (8002600 <HAL_RCC_OscConfig+0x470>)
 8002494:	f043 0301 	orr.w	r3, r3, #1
 8002498:	6713      	str	r3, [r2, #112]	; 0x70
 800249a:	e00b      	b.n	80024b4 <HAL_RCC_OscConfig+0x324>
 800249c:	4b58      	ldr	r3, [pc, #352]	; (8002600 <HAL_RCC_OscConfig+0x470>)
 800249e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024a0:	4a57      	ldr	r2, [pc, #348]	; (8002600 <HAL_RCC_OscConfig+0x470>)
 80024a2:	f023 0301 	bic.w	r3, r3, #1
 80024a6:	6713      	str	r3, [r2, #112]	; 0x70
 80024a8:	4b55      	ldr	r3, [pc, #340]	; (8002600 <HAL_RCC_OscConfig+0x470>)
 80024aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024ac:	4a54      	ldr	r2, [pc, #336]	; (8002600 <HAL_RCC_OscConfig+0x470>)
 80024ae:	f023 0304 	bic.w	r3, r3, #4
 80024b2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	689b      	ldr	r3, [r3, #8]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d015      	beq.n	80024e8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024bc:	f7fe ff8c 	bl	80013d8 <HAL_GetTick>
 80024c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024c2:	e00a      	b.n	80024da <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024c4:	f7fe ff88 	bl	80013d8 <HAL_GetTick>
 80024c8:	4602      	mov	r2, r0
 80024ca:	693b      	ldr	r3, [r7, #16]
 80024cc:	1ad3      	subs	r3, r2, r3
 80024ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d901      	bls.n	80024da <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80024d6:	2303      	movs	r3, #3
 80024d8:	e0cb      	b.n	8002672 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024da:	4b49      	ldr	r3, [pc, #292]	; (8002600 <HAL_RCC_OscConfig+0x470>)
 80024dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024de:	f003 0302 	and.w	r3, r3, #2
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d0ee      	beq.n	80024c4 <HAL_RCC_OscConfig+0x334>
 80024e6:	e014      	b.n	8002512 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024e8:	f7fe ff76 	bl	80013d8 <HAL_GetTick>
 80024ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024ee:	e00a      	b.n	8002506 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024f0:	f7fe ff72 	bl	80013d8 <HAL_GetTick>
 80024f4:	4602      	mov	r2, r0
 80024f6:	693b      	ldr	r3, [r7, #16]
 80024f8:	1ad3      	subs	r3, r2, r3
 80024fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80024fe:	4293      	cmp	r3, r2
 8002500:	d901      	bls.n	8002506 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002502:	2303      	movs	r3, #3
 8002504:	e0b5      	b.n	8002672 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002506:	4b3e      	ldr	r3, [pc, #248]	; (8002600 <HAL_RCC_OscConfig+0x470>)
 8002508:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800250a:	f003 0302 	and.w	r3, r3, #2
 800250e:	2b00      	cmp	r3, #0
 8002510:	d1ee      	bne.n	80024f0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002512:	7dfb      	ldrb	r3, [r7, #23]
 8002514:	2b01      	cmp	r3, #1
 8002516:	d105      	bne.n	8002524 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002518:	4b39      	ldr	r3, [pc, #228]	; (8002600 <HAL_RCC_OscConfig+0x470>)
 800251a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800251c:	4a38      	ldr	r2, [pc, #224]	; (8002600 <HAL_RCC_OscConfig+0x470>)
 800251e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002522:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	699b      	ldr	r3, [r3, #24]
 8002528:	2b00      	cmp	r3, #0
 800252a:	f000 80a1 	beq.w	8002670 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800252e:	4b34      	ldr	r3, [pc, #208]	; (8002600 <HAL_RCC_OscConfig+0x470>)
 8002530:	689b      	ldr	r3, [r3, #8]
 8002532:	f003 030c 	and.w	r3, r3, #12
 8002536:	2b08      	cmp	r3, #8
 8002538:	d05c      	beq.n	80025f4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	699b      	ldr	r3, [r3, #24]
 800253e:	2b02      	cmp	r3, #2
 8002540:	d141      	bne.n	80025c6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002542:	4b31      	ldr	r3, [pc, #196]	; (8002608 <HAL_RCC_OscConfig+0x478>)
 8002544:	2200      	movs	r2, #0
 8002546:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002548:	f7fe ff46 	bl	80013d8 <HAL_GetTick>
 800254c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800254e:	e008      	b.n	8002562 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002550:	f7fe ff42 	bl	80013d8 <HAL_GetTick>
 8002554:	4602      	mov	r2, r0
 8002556:	693b      	ldr	r3, [r7, #16]
 8002558:	1ad3      	subs	r3, r2, r3
 800255a:	2b02      	cmp	r3, #2
 800255c:	d901      	bls.n	8002562 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800255e:	2303      	movs	r3, #3
 8002560:	e087      	b.n	8002672 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002562:	4b27      	ldr	r3, [pc, #156]	; (8002600 <HAL_RCC_OscConfig+0x470>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800256a:	2b00      	cmp	r3, #0
 800256c:	d1f0      	bne.n	8002550 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	69da      	ldr	r2, [r3, #28]
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6a1b      	ldr	r3, [r3, #32]
 8002576:	431a      	orrs	r2, r3
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800257c:	019b      	lsls	r3, r3, #6
 800257e:	431a      	orrs	r2, r3
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002584:	085b      	lsrs	r3, r3, #1
 8002586:	3b01      	subs	r3, #1
 8002588:	041b      	lsls	r3, r3, #16
 800258a:	431a      	orrs	r2, r3
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002590:	061b      	lsls	r3, r3, #24
 8002592:	491b      	ldr	r1, [pc, #108]	; (8002600 <HAL_RCC_OscConfig+0x470>)
 8002594:	4313      	orrs	r3, r2
 8002596:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002598:	4b1b      	ldr	r3, [pc, #108]	; (8002608 <HAL_RCC_OscConfig+0x478>)
 800259a:	2201      	movs	r2, #1
 800259c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800259e:	f7fe ff1b 	bl	80013d8 <HAL_GetTick>
 80025a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025a4:	e008      	b.n	80025b8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025a6:	f7fe ff17 	bl	80013d8 <HAL_GetTick>
 80025aa:	4602      	mov	r2, r0
 80025ac:	693b      	ldr	r3, [r7, #16]
 80025ae:	1ad3      	subs	r3, r2, r3
 80025b0:	2b02      	cmp	r3, #2
 80025b2:	d901      	bls.n	80025b8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80025b4:	2303      	movs	r3, #3
 80025b6:	e05c      	b.n	8002672 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025b8:	4b11      	ldr	r3, [pc, #68]	; (8002600 <HAL_RCC_OscConfig+0x470>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d0f0      	beq.n	80025a6 <HAL_RCC_OscConfig+0x416>
 80025c4:	e054      	b.n	8002670 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025c6:	4b10      	ldr	r3, [pc, #64]	; (8002608 <HAL_RCC_OscConfig+0x478>)
 80025c8:	2200      	movs	r2, #0
 80025ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025cc:	f7fe ff04 	bl	80013d8 <HAL_GetTick>
 80025d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025d2:	e008      	b.n	80025e6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025d4:	f7fe ff00 	bl	80013d8 <HAL_GetTick>
 80025d8:	4602      	mov	r2, r0
 80025da:	693b      	ldr	r3, [r7, #16]
 80025dc:	1ad3      	subs	r3, r2, r3
 80025de:	2b02      	cmp	r3, #2
 80025e0:	d901      	bls.n	80025e6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80025e2:	2303      	movs	r3, #3
 80025e4:	e045      	b.n	8002672 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025e6:	4b06      	ldr	r3, [pc, #24]	; (8002600 <HAL_RCC_OscConfig+0x470>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d1f0      	bne.n	80025d4 <HAL_RCC_OscConfig+0x444>
 80025f2:	e03d      	b.n	8002670 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	699b      	ldr	r3, [r3, #24]
 80025f8:	2b01      	cmp	r3, #1
 80025fa:	d107      	bne.n	800260c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80025fc:	2301      	movs	r3, #1
 80025fe:	e038      	b.n	8002672 <HAL_RCC_OscConfig+0x4e2>
 8002600:	40023800 	.word	0x40023800
 8002604:	40007000 	.word	0x40007000
 8002608:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800260c:	4b1b      	ldr	r3, [pc, #108]	; (800267c <HAL_RCC_OscConfig+0x4ec>)
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	699b      	ldr	r3, [r3, #24]
 8002616:	2b01      	cmp	r3, #1
 8002618:	d028      	beq.n	800266c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002624:	429a      	cmp	r2, r3
 8002626:	d121      	bne.n	800266c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002632:	429a      	cmp	r2, r3
 8002634:	d11a      	bne.n	800266c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002636:	68fa      	ldr	r2, [r7, #12]
 8002638:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800263c:	4013      	ands	r3, r2
 800263e:	687a      	ldr	r2, [r7, #4]
 8002640:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002642:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002644:	4293      	cmp	r3, r2
 8002646:	d111      	bne.n	800266c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002652:	085b      	lsrs	r3, r3, #1
 8002654:	3b01      	subs	r3, #1
 8002656:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002658:	429a      	cmp	r2, r3
 800265a:	d107      	bne.n	800266c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002666:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002668:	429a      	cmp	r2, r3
 800266a:	d001      	beq.n	8002670 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800266c:	2301      	movs	r3, #1
 800266e:	e000      	b.n	8002672 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002670:	2300      	movs	r3, #0
}
 8002672:	4618      	mov	r0, r3
 8002674:	3718      	adds	r7, #24
 8002676:	46bd      	mov	sp, r7
 8002678:	bd80      	pop	{r7, pc}
 800267a:	bf00      	nop
 800267c:	40023800 	.word	0x40023800

08002680 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b084      	sub	sp, #16
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
 8002688:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d101      	bne.n	8002694 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002690:	2301      	movs	r3, #1
 8002692:	e0cc      	b.n	800282e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002694:	4b68      	ldr	r3, [pc, #416]	; (8002838 <HAL_RCC_ClockConfig+0x1b8>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f003 030f 	and.w	r3, r3, #15
 800269c:	683a      	ldr	r2, [r7, #0]
 800269e:	429a      	cmp	r2, r3
 80026a0:	d90c      	bls.n	80026bc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026a2:	4b65      	ldr	r3, [pc, #404]	; (8002838 <HAL_RCC_ClockConfig+0x1b8>)
 80026a4:	683a      	ldr	r2, [r7, #0]
 80026a6:	b2d2      	uxtb	r2, r2
 80026a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80026aa:	4b63      	ldr	r3, [pc, #396]	; (8002838 <HAL_RCC_ClockConfig+0x1b8>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f003 030f 	and.w	r3, r3, #15
 80026b2:	683a      	ldr	r2, [r7, #0]
 80026b4:	429a      	cmp	r2, r3
 80026b6:	d001      	beq.n	80026bc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80026b8:	2301      	movs	r3, #1
 80026ba:	e0b8      	b.n	800282e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f003 0302 	and.w	r3, r3, #2
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d020      	beq.n	800270a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f003 0304 	and.w	r3, r3, #4
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d005      	beq.n	80026e0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80026d4:	4b59      	ldr	r3, [pc, #356]	; (800283c <HAL_RCC_ClockConfig+0x1bc>)
 80026d6:	689b      	ldr	r3, [r3, #8]
 80026d8:	4a58      	ldr	r2, [pc, #352]	; (800283c <HAL_RCC_ClockConfig+0x1bc>)
 80026da:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80026de:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f003 0308 	and.w	r3, r3, #8
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d005      	beq.n	80026f8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80026ec:	4b53      	ldr	r3, [pc, #332]	; (800283c <HAL_RCC_ClockConfig+0x1bc>)
 80026ee:	689b      	ldr	r3, [r3, #8]
 80026f0:	4a52      	ldr	r2, [pc, #328]	; (800283c <HAL_RCC_ClockConfig+0x1bc>)
 80026f2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80026f6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026f8:	4b50      	ldr	r3, [pc, #320]	; (800283c <HAL_RCC_ClockConfig+0x1bc>)
 80026fa:	689b      	ldr	r3, [r3, #8]
 80026fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	689b      	ldr	r3, [r3, #8]
 8002704:	494d      	ldr	r1, [pc, #308]	; (800283c <HAL_RCC_ClockConfig+0x1bc>)
 8002706:	4313      	orrs	r3, r2
 8002708:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f003 0301 	and.w	r3, r3, #1
 8002712:	2b00      	cmp	r3, #0
 8002714:	d044      	beq.n	80027a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	2b01      	cmp	r3, #1
 800271c:	d107      	bne.n	800272e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800271e:	4b47      	ldr	r3, [pc, #284]	; (800283c <HAL_RCC_ClockConfig+0x1bc>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002726:	2b00      	cmp	r3, #0
 8002728:	d119      	bne.n	800275e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800272a:	2301      	movs	r3, #1
 800272c:	e07f      	b.n	800282e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	2b02      	cmp	r3, #2
 8002734:	d003      	beq.n	800273e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800273a:	2b03      	cmp	r3, #3
 800273c:	d107      	bne.n	800274e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800273e:	4b3f      	ldr	r3, [pc, #252]	; (800283c <HAL_RCC_ClockConfig+0x1bc>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002746:	2b00      	cmp	r3, #0
 8002748:	d109      	bne.n	800275e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800274a:	2301      	movs	r3, #1
 800274c:	e06f      	b.n	800282e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800274e:	4b3b      	ldr	r3, [pc, #236]	; (800283c <HAL_RCC_ClockConfig+0x1bc>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f003 0302 	and.w	r3, r3, #2
 8002756:	2b00      	cmp	r3, #0
 8002758:	d101      	bne.n	800275e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800275a:	2301      	movs	r3, #1
 800275c:	e067      	b.n	800282e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800275e:	4b37      	ldr	r3, [pc, #220]	; (800283c <HAL_RCC_ClockConfig+0x1bc>)
 8002760:	689b      	ldr	r3, [r3, #8]
 8002762:	f023 0203 	bic.w	r2, r3, #3
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	4934      	ldr	r1, [pc, #208]	; (800283c <HAL_RCC_ClockConfig+0x1bc>)
 800276c:	4313      	orrs	r3, r2
 800276e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002770:	f7fe fe32 	bl	80013d8 <HAL_GetTick>
 8002774:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002776:	e00a      	b.n	800278e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002778:	f7fe fe2e 	bl	80013d8 <HAL_GetTick>
 800277c:	4602      	mov	r2, r0
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	1ad3      	subs	r3, r2, r3
 8002782:	f241 3288 	movw	r2, #5000	; 0x1388
 8002786:	4293      	cmp	r3, r2
 8002788:	d901      	bls.n	800278e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800278a:	2303      	movs	r3, #3
 800278c:	e04f      	b.n	800282e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800278e:	4b2b      	ldr	r3, [pc, #172]	; (800283c <HAL_RCC_ClockConfig+0x1bc>)
 8002790:	689b      	ldr	r3, [r3, #8]
 8002792:	f003 020c 	and.w	r2, r3, #12
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	009b      	lsls	r3, r3, #2
 800279c:	429a      	cmp	r2, r3
 800279e:	d1eb      	bne.n	8002778 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80027a0:	4b25      	ldr	r3, [pc, #148]	; (8002838 <HAL_RCC_ClockConfig+0x1b8>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f003 030f 	and.w	r3, r3, #15
 80027a8:	683a      	ldr	r2, [r7, #0]
 80027aa:	429a      	cmp	r2, r3
 80027ac:	d20c      	bcs.n	80027c8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027ae:	4b22      	ldr	r3, [pc, #136]	; (8002838 <HAL_RCC_ClockConfig+0x1b8>)
 80027b0:	683a      	ldr	r2, [r7, #0]
 80027b2:	b2d2      	uxtb	r2, r2
 80027b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027b6:	4b20      	ldr	r3, [pc, #128]	; (8002838 <HAL_RCC_ClockConfig+0x1b8>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f003 030f 	and.w	r3, r3, #15
 80027be:	683a      	ldr	r2, [r7, #0]
 80027c0:	429a      	cmp	r2, r3
 80027c2:	d001      	beq.n	80027c8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80027c4:	2301      	movs	r3, #1
 80027c6:	e032      	b.n	800282e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f003 0304 	and.w	r3, r3, #4
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d008      	beq.n	80027e6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80027d4:	4b19      	ldr	r3, [pc, #100]	; (800283c <HAL_RCC_ClockConfig+0x1bc>)
 80027d6:	689b      	ldr	r3, [r3, #8]
 80027d8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	68db      	ldr	r3, [r3, #12]
 80027e0:	4916      	ldr	r1, [pc, #88]	; (800283c <HAL_RCC_ClockConfig+0x1bc>)
 80027e2:	4313      	orrs	r3, r2
 80027e4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f003 0308 	and.w	r3, r3, #8
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d009      	beq.n	8002806 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80027f2:	4b12      	ldr	r3, [pc, #72]	; (800283c <HAL_RCC_ClockConfig+0x1bc>)
 80027f4:	689b      	ldr	r3, [r3, #8]
 80027f6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	691b      	ldr	r3, [r3, #16]
 80027fe:	00db      	lsls	r3, r3, #3
 8002800:	490e      	ldr	r1, [pc, #56]	; (800283c <HAL_RCC_ClockConfig+0x1bc>)
 8002802:	4313      	orrs	r3, r2
 8002804:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002806:	f000 f821 	bl	800284c <HAL_RCC_GetSysClockFreq>
 800280a:	4602      	mov	r2, r0
 800280c:	4b0b      	ldr	r3, [pc, #44]	; (800283c <HAL_RCC_ClockConfig+0x1bc>)
 800280e:	689b      	ldr	r3, [r3, #8]
 8002810:	091b      	lsrs	r3, r3, #4
 8002812:	f003 030f 	and.w	r3, r3, #15
 8002816:	490a      	ldr	r1, [pc, #40]	; (8002840 <HAL_RCC_ClockConfig+0x1c0>)
 8002818:	5ccb      	ldrb	r3, [r1, r3]
 800281a:	fa22 f303 	lsr.w	r3, r2, r3
 800281e:	4a09      	ldr	r2, [pc, #36]	; (8002844 <HAL_RCC_ClockConfig+0x1c4>)
 8002820:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002822:	4b09      	ldr	r3, [pc, #36]	; (8002848 <HAL_RCC_ClockConfig+0x1c8>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4618      	mov	r0, r3
 8002828:	f7fe fd92 	bl	8001350 <HAL_InitTick>

  return HAL_OK;
 800282c:	2300      	movs	r3, #0
}
 800282e:	4618      	mov	r0, r3
 8002830:	3710      	adds	r7, #16
 8002832:	46bd      	mov	sp, r7
 8002834:	bd80      	pop	{r7, pc}
 8002836:	bf00      	nop
 8002838:	40023c00 	.word	0x40023c00
 800283c:	40023800 	.word	0x40023800
 8002840:	08002e48 	.word	0x08002e48
 8002844:	20000000 	.word	0x20000000
 8002848:	20000004 	.word	0x20000004

0800284c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800284c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002850:	b094      	sub	sp, #80	; 0x50
 8002852:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002854:	2300      	movs	r3, #0
 8002856:	647b      	str	r3, [r7, #68]	; 0x44
 8002858:	2300      	movs	r3, #0
 800285a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800285c:	2300      	movs	r3, #0
 800285e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002860:	2300      	movs	r3, #0
 8002862:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002864:	4b79      	ldr	r3, [pc, #484]	; (8002a4c <HAL_RCC_GetSysClockFreq+0x200>)
 8002866:	689b      	ldr	r3, [r3, #8]
 8002868:	f003 030c 	and.w	r3, r3, #12
 800286c:	2b08      	cmp	r3, #8
 800286e:	d00d      	beq.n	800288c <HAL_RCC_GetSysClockFreq+0x40>
 8002870:	2b08      	cmp	r3, #8
 8002872:	f200 80e1 	bhi.w	8002a38 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002876:	2b00      	cmp	r3, #0
 8002878:	d002      	beq.n	8002880 <HAL_RCC_GetSysClockFreq+0x34>
 800287a:	2b04      	cmp	r3, #4
 800287c:	d003      	beq.n	8002886 <HAL_RCC_GetSysClockFreq+0x3a>
 800287e:	e0db      	b.n	8002a38 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002880:	4b73      	ldr	r3, [pc, #460]	; (8002a50 <HAL_RCC_GetSysClockFreq+0x204>)
 8002882:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002884:	e0db      	b.n	8002a3e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002886:	4b73      	ldr	r3, [pc, #460]	; (8002a54 <HAL_RCC_GetSysClockFreq+0x208>)
 8002888:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800288a:	e0d8      	b.n	8002a3e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800288c:	4b6f      	ldr	r3, [pc, #444]	; (8002a4c <HAL_RCC_GetSysClockFreq+0x200>)
 800288e:	685b      	ldr	r3, [r3, #4]
 8002890:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002894:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002896:	4b6d      	ldr	r3, [pc, #436]	; (8002a4c <HAL_RCC_GetSysClockFreq+0x200>)
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d063      	beq.n	800296a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80028a2:	4b6a      	ldr	r3, [pc, #424]	; (8002a4c <HAL_RCC_GetSysClockFreq+0x200>)
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	099b      	lsrs	r3, r3, #6
 80028a8:	2200      	movs	r2, #0
 80028aa:	63bb      	str	r3, [r7, #56]	; 0x38
 80028ac:	63fa      	str	r2, [r7, #60]	; 0x3c
 80028ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80028b4:	633b      	str	r3, [r7, #48]	; 0x30
 80028b6:	2300      	movs	r3, #0
 80028b8:	637b      	str	r3, [r7, #52]	; 0x34
 80028ba:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80028be:	4622      	mov	r2, r4
 80028c0:	462b      	mov	r3, r5
 80028c2:	f04f 0000 	mov.w	r0, #0
 80028c6:	f04f 0100 	mov.w	r1, #0
 80028ca:	0159      	lsls	r1, r3, #5
 80028cc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80028d0:	0150      	lsls	r0, r2, #5
 80028d2:	4602      	mov	r2, r0
 80028d4:	460b      	mov	r3, r1
 80028d6:	4621      	mov	r1, r4
 80028d8:	1a51      	subs	r1, r2, r1
 80028da:	6139      	str	r1, [r7, #16]
 80028dc:	4629      	mov	r1, r5
 80028de:	eb63 0301 	sbc.w	r3, r3, r1
 80028e2:	617b      	str	r3, [r7, #20]
 80028e4:	f04f 0200 	mov.w	r2, #0
 80028e8:	f04f 0300 	mov.w	r3, #0
 80028ec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80028f0:	4659      	mov	r1, fp
 80028f2:	018b      	lsls	r3, r1, #6
 80028f4:	4651      	mov	r1, sl
 80028f6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80028fa:	4651      	mov	r1, sl
 80028fc:	018a      	lsls	r2, r1, #6
 80028fe:	4651      	mov	r1, sl
 8002900:	ebb2 0801 	subs.w	r8, r2, r1
 8002904:	4659      	mov	r1, fp
 8002906:	eb63 0901 	sbc.w	r9, r3, r1
 800290a:	f04f 0200 	mov.w	r2, #0
 800290e:	f04f 0300 	mov.w	r3, #0
 8002912:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002916:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800291a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800291e:	4690      	mov	r8, r2
 8002920:	4699      	mov	r9, r3
 8002922:	4623      	mov	r3, r4
 8002924:	eb18 0303 	adds.w	r3, r8, r3
 8002928:	60bb      	str	r3, [r7, #8]
 800292a:	462b      	mov	r3, r5
 800292c:	eb49 0303 	adc.w	r3, r9, r3
 8002930:	60fb      	str	r3, [r7, #12]
 8002932:	f04f 0200 	mov.w	r2, #0
 8002936:	f04f 0300 	mov.w	r3, #0
 800293a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800293e:	4629      	mov	r1, r5
 8002940:	024b      	lsls	r3, r1, #9
 8002942:	4621      	mov	r1, r4
 8002944:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002948:	4621      	mov	r1, r4
 800294a:	024a      	lsls	r2, r1, #9
 800294c:	4610      	mov	r0, r2
 800294e:	4619      	mov	r1, r3
 8002950:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002952:	2200      	movs	r2, #0
 8002954:	62bb      	str	r3, [r7, #40]	; 0x28
 8002956:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002958:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800295c:	f7fd fc46 	bl	80001ec <__aeabi_uldivmod>
 8002960:	4602      	mov	r2, r0
 8002962:	460b      	mov	r3, r1
 8002964:	4613      	mov	r3, r2
 8002966:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002968:	e058      	b.n	8002a1c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800296a:	4b38      	ldr	r3, [pc, #224]	; (8002a4c <HAL_RCC_GetSysClockFreq+0x200>)
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	099b      	lsrs	r3, r3, #6
 8002970:	2200      	movs	r2, #0
 8002972:	4618      	mov	r0, r3
 8002974:	4611      	mov	r1, r2
 8002976:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800297a:	623b      	str	r3, [r7, #32]
 800297c:	2300      	movs	r3, #0
 800297e:	627b      	str	r3, [r7, #36]	; 0x24
 8002980:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002984:	4642      	mov	r2, r8
 8002986:	464b      	mov	r3, r9
 8002988:	f04f 0000 	mov.w	r0, #0
 800298c:	f04f 0100 	mov.w	r1, #0
 8002990:	0159      	lsls	r1, r3, #5
 8002992:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002996:	0150      	lsls	r0, r2, #5
 8002998:	4602      	mov	r2, r0
 800299a:	460b      	mov	r3, r1
 800299c:	4641      	mov	r1, r8
 800299e:	ebb2 0a01 	subs.w	sl, r2, r1
 80029a2:	4649      	mov	r1, r9
 80029a4:	eb63 0b01 	sbc.w	fp, r3, r1
 80029a8:	f04f 0200 	mov.w	r2, #0
 80029ac:	f04f 0300 	mov.w	r3, #0
 80029b0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80029b4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80029b8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80029bc:	ebb2 040a 	subs.w	r4, r2, sl
 80029c0:	eb63 050b 	sbc.w	r5, r3, fp
 80029c4:	f04f 0200 	mov.w	r2, #0
 80029c8:	f04f 0300 	mov.w	r3, #0
 80029cc:	00eb      	lsls	r3, r5, #3
 80029ce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80029d2:	00e2      	lsls	r2, r4, #3
 80029d4:	4614      	mov	r4, r2
 80029d6:	461d      	mov	r5, r3
 80029d8:	4643      	mov	r3, r8
 80029da:	18e3      	adds	r3, r4, r3
 80029dc:	603b      	str	r3, [r7, #0]
 80029de:	464b      	mov	r3, r9
 80029e0:	eb45 0303 	adc.w	r3, r5, r3
 80029e4:	607b      	str	r3, [r7, #4]
 80029e6:	f04f 0200 	mov.w	r2, #0
 80029ea:	f04f 0300 	mov.w	r3, #0
 80029ee:	e9d7 4500 	ldrd	r4, r5, [r7]
 80029f2:	4629      	mov	r1, r5
 80029f4:	028b      	lsls	r3, r1, #10
 80029f6:	4621      	mov	r1, r4
 80029f8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80029fc:	4621      	mov	r1, r4
 80029fe:	028a      	lsls	r2, r1, #10
 8002a00:	4610      	mov	r0, r2
 8002a02:	4619      	mov	r1, r3
 8002a04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a06:	2200      	movs	r2, #0
 8002a08:	61bb      	str	r3, [r7, #24]
 8002a0a:	61fa      	str	r2, [r7, #28]
 8002a0c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002a10:	f7fd fbec 	bl	80001ec <__aeabi_uldivmod>
 8002a14:	4602      	mov	r2, r0
 8002a16:	460b      	mov	r3, r1
 8002a18:	4613      	mov	r3, r2
 8002a1a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002a1c:	4b0b      	ldr	r3, [pc, #44]	; (8002a4c <HAL_RCC_GetSysClockFreq+0x200>)
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	0c1b      	lsrs	r3, r3, #16
 8002a22:	f003 0303 	and.w	r3, r3, #3
 8002a26:	3301      	adds	r3, #1
 8002a28:	005b      	lsls	r3, r3, #1
 8002a2a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002a2c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002a2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a30:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a34:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002a36:	e002      	b.n	8002a3e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002a38:	4b05      	ldr	r3, [pc, #20]	; (8002a50 <HAL_RCC_GetSysClockFreq+0x204>)
 8002a3a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002a3c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002a40:	4618      	mov	r0, r3
 8002a42:	3750      	adds	r7, #80	; 0x50
 8002a44:	46bd      	mov	sp, r7
 8002a46:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002a4a:	bf00      	nop
 8002a4c:	40023800 	.word	0x40023800
 8002a50:	00f42400 	.word	0x00f42400
 8002a54:	007a1200 	.word	0x007a1200

08002a58 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b086      	sub	sp, #24
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002a60:	2300      	movs	r3, #0
 8002a62:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8002a64:	2300      	movs	r3, #0
 8002a66:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f003 0301 	and.w	r3, r3, #1
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d10b      	bne.n	8002a8c <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d105      	bne.n	8002a8c <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d075      	beq.n	8002b78 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002a8c:	4b91      	ldr	r3, [pc, #580]	; (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8002a8e:	2200      	movs	r2, #0
 8002a90:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002a92:	f7fe fca1 	bl	80013d8 <HAL_GetTick>
 8002a96:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002a98:	e008      	b.n	8002aac <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002a9a:	f7fe fc9d 	bl	80013d8 <HAL_GetTick>
 8002a9e:	4602      	mov	r2, r0
 8002aa0:	697b      	ldr	r3, [r7, #20]
 8002aa2:	1ad3      	subs	r3, r2, r3
 8002aa4:	2b02      	cmp	r3, #2
 8002aa6:	d901      	bls.n	8002aac <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002aa8:	2303      	movs	r3, #3
 8002aaa:	e189      	b.n	8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002aac:	4b8a      	ldr	r3, [pc, #552]	; (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d1f0      	bne.n	8002a9a <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f003 0301 	and.w	r3, r3, #1
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d009      	beq.n	8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	019a      	lsls	r2, r3, #6
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	689b      	ldr	r3, [r3, #8]
 8002ace:	071b      	lsls	r3, r3, #28
 8002ad0:	4981      	ldr	r1, [pc, #516]	; (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f003 0302 	and.w	r3, r3, #2
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d01f      	beq.n	8002b24 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002ae4:	4b7c      	ldr	r3, [pc, #496]	; (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002ae6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002aea:	0f1b      	lsrs	r3, r3, #28
 8002aec:	f003 0307 	and.w	r3, r3, #7
 8002af0:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	019a      	lsls	r2, r3, #6
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	68db      	ldr	r3, [r3, #12]
 8002afc:	061b      	lsls	r3, r3, #24
 8002afe:	431a      	orrs	r2, r3
 8002b00:	693b      	ldr	r3, [r7, #16]
 8002b02:	071b      	lsls	r3, r3, #28
 8002b04:	4974      	ldr	r1, [pc, #464]	; (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002b06:	4313      	orrs	r3, r2
 8002b08:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002b0c:	4b72      	ldr	r3, [pc, #456]	; (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002b0e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002b12:	f023 021f 	bic.w	r2, r3, #31
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	69db      	ldr	r3, [r3, #28]
 8002b1a:	3b01      	subs	r3, #1
 8002b1c:	496e      	ldr	r1, [pc, #440]	; (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002b1e:	4313      	orrs	r3, r2
 8002b20:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d00d      	beq.n	8002b4c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	019a      	lsls	r2, r3, #6
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	68db      	ldr	r3, [r3, #12]
 8002b3a:	061b      	lsls	r3, r3, #24
 8002b3c:	431a      	orrs	r2, r3
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	689b      	ldr	r3, [r3, #8]
 8002b42:	071b      	lsls	r3, r3, #28
 8002b44:	4964      	ldr	r1, [pc, #400]	; (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002b46:	4313      	orrs	r3, r2
 8002b48:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002b4c:	4b61      	ldr	r3, [pc, #388]	; (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8002b4e:	2201      	movs	r2, #1
 8002b50:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002b52:	f7fe fc41 	bl	80013d8 <HAL_GetTick>
 8002b56:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002b58:	e008      	b.n	8002b6c <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002b5a:	f7fe fc3d 	bl	80013d8 <HAL_GetTick>
 8002b5e:	4602      	mov	r2, r0
 8002b60:	697b      	ldr	r3, [r7, #20]
 8002b62:	1ad3      	subs	r3, r2, r3
 8002b64:	2b02      	cmp	r3, #2
 8002b66:	d901      	bls.n	8002b6c <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002b68:	2303      	movs	r3, #3
 8002b6a:	e129      	b.n	8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002b6c:	4b5a      	ldr	r3, [pc, #360]	; (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d0f0      	beq.n	8002b5a <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f003 0304 	and.w	r3, r3, #4
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d105      	bne.n	8002b90 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d079      	beq.n	8002c84 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002b90:	4b52      	ldr	r3, [pc, #328]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8002b92:	2200      	movs	r2, #0
 8002b94:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002b96:	f7fe fc1f 	bl	80013d8 <HAL_GetTick>
 8002b9a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002b9c:	e008      	b.n	8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8002b9e:	f7fe fc1b 	bl	80013d8 <HAL_GetTick>
 8002ba2:	4602      	mov	r2, r0
 8002ba4:	697b      	ldr	r3, [r7, #20]
 8002ba6:	1ad3      	subs	r3, r2, r3
 8002ba8:	2b02      	cmp	r3, #2
 8002baa:	d901      	bls.n	8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002bac:	2303      	movs	r3, #3
 8002bae:	e107      	b.n	8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002bb0:	4b49      	ldr	r3, [pc, #292]	; (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002bb8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002bbc:	d0ef      	beq.n	8002b9e <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f003 0304 	and.w	r3, r3, #4
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d020      	beq.n	8002c0c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002bca:	4b43      	ldr	r3, [pc, #268]	; (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002bcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bd0:	0f1b      	lsrs	r3, r3, #28
 8002bd2:	f003 0307 	and.w	r3, r3, #7
 8002bd6:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	691b      	ldr	r3, [r3, #16]
 8002bdc:	019a      	lsls	r2, r3, #6
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	695b      	ldr	r3, [r3, #20]
 8002be2:	061b      	lsls	r3, r3, #24
 8002be4:	431a      	orrs	r2, r3
 8002be6:	693b      	ldr	r3, [r7, #16]
 8002be8:	071b      	lsls	r3, r3, #28
 8002bea:	493b      	ldr	r1, [pc, #236]	; (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002bec:	4313      	orrs	r3, r2
 8002bee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002bf2:	4b39      	ldr	r3, [pc, #228]	; (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002bf4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002bf8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6a1b      	ldr	r3, [r3, #32]
 8002c00:	3b01      	subs	r3, #1
 8002c02:	021b      	lsls	r3, r3, #8
 8002c04:	4934      	ldr	r1, [pc, #208]	; (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002c06:	4313      	orrs	r3, r2
 8002c08:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f003 0308 	and.w	r3, r3, #8
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d01e      	beq.n	8002c56 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002c18:	4b2f      	ldr	r3, [pc, #188]	; (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002c1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c1e:	0e1b      	lsrs	r3, r3, #24
 8002c20:	f003 030f 	and.w	r3, r3, #15
 8002c24:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	691b      	ldr	r3, [r3, #16]
 8002c2a:	019a      	lsls	r2, r3, #6
 8002c2c:	693b      	ldr	r3, [r7, #16]
 8002c2e:	061b      	lsls	r3, r3, #24
 8002c30:	431a      	orrs	r2, r3
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	699b      	ldr	r3, [r3, #24]
 8002c36:	071b      	lsls	r3, r3, #28
 8002c38:	4927      	ldr	r1, [pc, #156]	; (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002c3a:	4313      	orrs	r3, r2
 8002c3c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002c40:	4b25      	ldr	r3, [pc, #148]	; (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002c42:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002c46:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c4e:	4922      	ldr	r1, [pc, #136]	; (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002c50:	4313      	orrs	r3, r2
 8002c52:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002c56:	4b21      	ldr	r3, [pc, #132]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8002c58:	2201      	movs	r2, #1
 8002c5a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002c5c:	f7fe fbbc 	bl	80013d8 <HAL_GetTick>
 8002c60:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002c62:	e008      	b.n	8002c76 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8002c64:	f7fe fbb8 	bl	80013d8 <HAL_GetTick>
 8002c68:	4602      	mov	r2, r0
 8002c6a:	697b      	ldr	r3, [r7, #20]
 8002c6c:	1ad3      	subs	r3, r2, r3
 8002c6e:	2b02      	cmp	r3, #2
 8002c70:	d901      	bls.n	8002c76 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002c72:	2303      	movs	r3, #3
 8002c74:	e0a4      	b.n	8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002c76:	4b18      	ldr	r3, [pc, #96]	; (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002c7e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002c82:	d1ef      	bne.n	8002c64 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f003 0320 	and.w	r3, r3, #32
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	f000 808b 	beq.w	8002da8 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002c92:	2300      	movs	r3, #0
 8002c94:	60fb      	str	r3, [r7, #12]
 8002c96:	4b10      	ldr	r3, [pc, #64]	; (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c9a:	4a0f      	ldr	r2, [pc, #60]	; (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002c9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ca0:	6413      	str	r3, [r2, #64]	; 0x40
 8002ca2:	4b0d      	ldr	r3, [pc, #52]	; (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002caa:	60fb      	str	r3, [r7, #12]
 8002cac:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002cae:	4b0c      	ldr	r3, [pc, #48]	; (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4a0b      	ldr	r2, [pc, #44]	; (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8002cb4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cb8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002cba:	f7fe fb8d 	bl	80013d8 <HAL_GetTick>
 8002cbe:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002cc0:	e010      	b.n	8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002cc2:	f7fe fb89 	bl	80013d8 <HAL_GetTick>
 8002cc6:	4602      	mov	r2, r0
 8002cc8:	697b      	ldr	r3, [r7, #20]
 8002cca:	1ad3      	subs	r3, r2, r3
 8002ccc:	2b02      	cmp	r3, #2
 8002cce:	d909      	bls.n	8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8002cd0:	2303      	movs	r3, #3
 8002cd2:	e075      	b.n	8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8002cd4:	42470068 	.word	0x42470068
 8002cd8:	40023800 	.word	0x40023800
 8002cdc:	42470070 	.word	0x42470070
 8002ce0:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002ce4:	4b38      	ldr	r3, [pc, #224]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d0e8      	beq.n	8002cc2 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002cf0:	4b36      	ldr	r3, [pc, #216]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8002cf2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cf4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002cf8:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002cfa:	693b      	ldr	r3, [r7, #16]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d02f      	beq.n	8002d60 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d04:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d08:	693a      	ldr	r2, [r7, #16]
 8002d0a:	429a      	cmp	r2, r3
 8002d0c:	d028      	beq.n	8002d60 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002d0e:	4b2f      	ldr	r3, [pc, #188]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8002d10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d12:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d16:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002d18:	4b2d      	ldr	r3, [pc, #180]	; (8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8002d1a:	2201      	movs	r2, #1
 8002d1c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002d1e:	4b2c      	ldr	r3, [pc, #176]	; (8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8002d20:	2200      	movs	r2, #0
 8002d22:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8002d24:	4a29      	ldr	r2, [pc, #164]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8002d26:	693b      	ldr	r3, [r7, #16]
 8002d28:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002d2a:	4b28      	ldr	r3, [pc, #160]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8002d2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d2e:	f003 0301 	and.w	r3, r3, #1
 8002d32:	2b01      	cmp	r3, #1
 8002d34:	d114      	bne.n	8002d60 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8002d36:	f7fe fb4f 	bl	80013d8 <HAL_GetTick>
 8002d3a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d3c:	e00a      	b.n	8002d54 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d3e:	f7fe fb4b 	bl	80013d8 <HAL_GetTick>
 8002d42:	4602      	mov	r2, r0
 8002d44:	697b      	ldr	r3, [r7, #20]
 8002d46:	1ad3      	subs	r3, r2, r3
 8002d48:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d901      	bls.n	8002d54 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8002d50:	2303      	movs	r3, #3
 8002d52:	e035      	b.n	8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d54:	4b1d      	ldr	r3, [pc, #116]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8002d56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d58:	f003 0302 	and.w	r3, r3, #2
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d0ee      	beq.n	8002d3e <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d64:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d68:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002d6c:	d10d      	bne.n	8002d8a <HAL_RCCEx_PeriphCLKConfig+0x332>
 8002d6e:	4b17      	ldr	r3, [pc, #92]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8002d70:	689b      	ldr	r3, [r3, #8]
 8002d72:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d7a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8002d7e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d82:	4912      	ldr	r1, [pc, #72]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8002d84:	4313      	orrs	r3, r2
 8002d86:	608b      	str	r3, [r1, #8]
 8002d88:	e005      	b.n	8002d96 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8002d8a:	4b10      	ldr	r3, [pc, #64]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8002d8c:	689b      	ldr	r3, [r3, #8]
 8002d8e:	4a0f      	ldr	r2, [pc, #60]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8002d90:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002d94:	6093      	str	r3, [r2, #8]
 8002d96:	4b0d      	ldr	r3, [pc, #52]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8002d98:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d9e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002da2:	490a      	ldr	r1, [pc, #40]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8002da4:	4313      	orrs	r3, r2
 8002da6:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f003 0310 	and.w	r3, r3, #16
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d004      	beq.n	8002dbe <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8002dba:	4b06      	ldr	r3, [pc, #24]	; (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8002dbc:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8002dbe:	2300      	movs	r3, #0
}
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	3718      	adds	r7, #24
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	bd80      	pop	{r7, pc}
 8002dc8:	40007000 	.word	0x40007000
 8002dcc:	40023800 	.word	0x40023800
 8002dd0:	42470e40 	.word	0x42470e40
 8002dd4:	424711e0 	.word	0x424711e0

08002dd8 <__libc_init_array>:
 8002dd8:	b570      	push	{r4, r5, r6, lr}
 8002dda:	4d0d      	ldr	r5, [pc, #52]	; (8002e10 <__libc_init_array+0x38>)
 8002ddc:	4c0d      	ldr	r4, [pc, #52]	; (8002e14 <__libc_init_array+0x3c>)
 8002dde:	1b64      	subs	r4, r4, r5
 8002de0:	10a4      	asrs	r4, r4, #2
 8002de2:	2600      	movs	r6, #0
 8002de4:	42a6      	cmp	r6, r4
 8002de6:	d109      	bne.n	8002dfc <__libc_init_array+0x24>
 8002de8:	4d0b      	ldr	r5, [pc, #44]	; (8002e18 <__libc_init_array+0x40>)
 8002dea:	4c0c      	ldr	r4, [pc, #48]	; (8002e1c <__libc_init_array+0x44>)
 8002dec:	f000 f820 	bl	8002e30 <_init>
 8002df0:	1b64      	subs	r4, r4, r5
 8002df2:	10a4      	asrs	r4, r4, #2
 8002df4:	2600      	movs	r6, #0
 8002df6:	42a6      	cmp	r6, r4
 8002df8:	d105      	bne.n	8002e06 <__libc_init_array+0x2e>
 8002dfa:	bd70      	pop	{r4, r5, r6, pc}
 8002dfc:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e00:	4798      	blx	r3
 8002e02:	3601      	adds	r6, #1
 8002e04:	e7ee      	b.n	8002de4 <__libc_init_array+0xc>
 8002e06:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e0a:	4798      	blx	r3
 8002e0c:	3601      	adds	r6, #1
 8002e0e:	e7f2      	b.n	8002df6 <__libc_init_array+0x1e>
 8002e10:	08073660 	.word	0x08073660
 8002e14:	08073660 	.word	0x08073660
 8002e18:	08073660 	.word	0x08073660
 8002e1c:	08073664 	.word	0x08073664

08002e20 <memset>:
 8002e20:	4402      	add	r2, r0
 8002e22:	4603      	mov	r3, r0
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d100      	bne.n	8002e2a <memset+0xa>
 8002e28:	4770      	bx	lr
 8002e2a:	f803 1b01 	strb.w	r1, [r3], #1
 8002e2e:	e7f9      	b.n	8002e24 <memset+0x4>

08002e30 <_init>:
 8002e30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e32:	bf00      	nop
 8002e34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e36:	bc08      	pop	{r3}
 8002e38:	469e      	mov	lr, r3
 8002e3a:	4770      	bx	lr

08002e3c <_fini>:
 8002e3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e3e:	bf00      	nop
 8002e40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e42:	bc08      	pop	{r3}
 8002e44:	469e      	mov	lr, r3
 8002e46:	4770      	bx	lr
